import os
import logging
from datetime import datetime, timedelta, date

from flask import Flask, request, jsonify
from telebot import TeleBot, types
import psycopg2
from psycopg2.extras import RealDictCursor
from flask_cors import CORS

# =========================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =========================
logging.basicConfig(level=logging.INFO)

# =========================
# ENV
# =========================
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.environ.get("DATABASE_URL") or "").strip()
ADMIN_ID_ENV = (os.environ.get("ADMIN_ID") or "").strip()
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Vercel
WEBAPP_URL = (os.environ.get("WEBAPP_URL") or "https://gitrepo-drab.vercel.app").strip() 
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

if not BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
if not DATABASE_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")
if not RENDER_EXTERNAL_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")

if "render.com/" in DATABASE_URL and ":5432" not in DATABASE_URL:
    DATABASE_URL = DATABASE_URL.replace(".render.com/", ".render.com:5432/")

ADMIN_ID = None
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
    except ValueError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID ('{ADMIN_ID_ENV}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º; –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# =========================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ú–ï–ù–Æ (–ò–ó–ú–ï–ù–ï–ù–û –î–õ–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ú–ï–ù–Æ)
# =========================
RESTAURANT_NAME = "–ë–µ–ª—ã–π –õ–∏—Å"
# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û–ë–ù–û–í–ò–¢–ï, –µ—Å–ª–∏ –≤–∞—à –¥–æ–º–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è.
BASE_MENU_IMAGE_URL = "https://gitrepo-drab.vercel.app/images" 

MENU_CATEGORIES = {
    "ü•£ –ó–∞–∫—É—Å–∫–∏ (–•–æ–ª–æ–¥–Ω—ã–µ)": f"{BASE_MENU_IMAGE_URL}/menu1.jpg", # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å
    "üå∂Ô∏è –ó–∞–∫—É—Å–∫–∏ (–ì–æ—Ä—è—á–∏–µ/–°—É–ø—ã)": f"{BASE_MENU_IMAGE_URL}/menu2.jpg", # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å
    "ü•ó –°–∞–ª–∞—Ç—ã": f"{BASE_MENU_IMAGE_URL}/menu3.jpg",
    "üçî –ë—É—Ä–≥–µ—Ä—ã": f"{BASE_MENU_IMAGE_URL}/menu4.jpg",
    "üåØ –°—ç–Ω–¥–≤–∏—á–∏ & –†–æ–ª–ª—ã": f"{BASE_MENU_IMAGE_URL}/menu5.jpg",
    "üçñ –û—Å–Ω–æ–≤–Ω–æ–µ (–ì–æ–≤—è–¥–∏–Ω–∞)": f"{BASE_MENU_IMAGE_URL}/menu6.jpg",
    "üêü –û—Å–Ω–æ–≤–Ω–æ–µ (–†—ã–±–∞/–°–≤–∏–Ω–∏–Ω–∞)": f"{BASE_MENU_IMAGE_URL}/menu7.jpg",
    "üçó –û—Å–Ω–æ–≤–Ω–æ–µ (–ö—É—Ä–∏—Ü–∞/–£—Ç–∫–∞)": f"{BASE_MENU_IMAGE_URL}/menu8.jpg",
    "ü•© –ü—Ä–µ–º–∏—É–º –°—Ç–µ–π–∫–∏": f"{BASE_MENU_IMAGE_URL}/menu9.jpg",
    "‚òï –î–µ—Å–µ—Ä—Ç—ã & –ù–∞–ø–∏—Ç–∫–∏": f"{BASE_MENU_IMAGE_URL}/menu10.jpg",
}
# –ê–∫—Ç—É–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
WELCOME_PHOTO_URL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbh6M8aJwxylo8aI1B-ceUHaiOyEnA425a0A&s" 

# =========================
# DB INIT
# =========================
def db_connect():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def init_db():
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü—ã
                cur.execute("""
                CREATE TABLE IF NOT EXISTS tables (
                    id INT PRIMARY KEY
                );
                """)
                cur.execute("""
                CREATE TABLE IF NOT EXISTS bookings (
                    booking_id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    user_name VARCHAR(255),
                    phone TEXT,
                    guests INT,
                    table_id INT NOT NULL,
                    time_slot TEXT NOT NULL,
                    booked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    booking_for TIMESTAMP
                );
                """)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_id BIGINT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_name TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS phone TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guests INT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS booking_for TIMESTAMP;")
                
                # ========================================================
                # –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ù–î–ï–ö–°–û–í –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
                # ========================================================
                # 1. –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (table_id, date, time)
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_conflict ON bookings (table_id, booking_for);")
                
                # 2. –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ú–æ—è –±—Ä–æ–Ω—å)
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_user_active ON bookings (user_id, booking_for DESC);")
                
                # 3. –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ –æ–±—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–æ–∏—Å–∫)
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_future_time ON bookings (booking_for);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_booked_at ON bookings (booked_at DESC);")
                # ========================================================

                # ========================================================
                # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤ –¥–æ 20,
                #           –¥–æ–±–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ.
                # ========================================================
                TARGET_TABLE_COUNT = 20
                cur.execute("SELECT id FROM tables ORDER BY id ASC;")
                existing_table_ids = [row['id'] for row in cur.fetchall()]
                tables_to_add = [i for i in range(1, TARGET_TABLE_COUNT + 1) if i not in existing_table_ids]
                
                if tables_to_add:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏: (1), (2), (3)...
                    insert_values = ",".join(f"({i})" for i in tables_to_add)
                    cur.execute(f"INSERT INTO tables (id) VALUES {insert_values};")
                    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tables_to_add)} –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–æ–≤ (ID: {tables_to_add}).")
                else:
                    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –í—Å–µ —Å—Ç–æ–ª—ã –¥–æ 20 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
                # ========================================================

            conn.commit()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")

# =========================
# BOT & APP
# =========================
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)
CORS(app)

# –í–´–ó–û–í –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–î - –¢–ï–ü–ï–†–¨ –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø init_db()
with app.app_context():
    init_db()

# =========================
# HELPERS (UI)
# =========================
def main_reply_kb(user_id: int, user_name: str) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê WEBAPP
    web_app_url = f"{WEBAPP_URL}?user_id={user_id}&user_name={user_name}&bot_url={RENDER_EXTERNAL_URL}"
    
    row1 = [
        types.KeyboardButton(text="üóìÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=types.WebAppInfo(url=web_app_url)),
        types.KeyboardButton("üìã –ú–æ—è –±—Ä–æ–Ω—å"),
    ]
    row2 = [types.KeyboardButton("üìñ –ú–µ–Ω—é")]
    kb.row(*row1)
    kb.row(*row2)
    if ADMIN_ID and str(user_id) == str(ADMIN_ID):
        kb.row(types.KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è"))
    return kb

# =========================
# COMMANDS & BUTTONS
# =========================
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    bot.send_photo(
        message.chat.id,
        photo=WELCOME_PHOTO_URL, # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£
        caption=f"<b>–†–µ—Å—Ç–æ–±–∞—Ä ¬´{RESTAURANT_NAME}¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–æ–ª–∏–∫!",
        reply_markup=main_reply_kb(user_id, user_name),
        parse_mode="HTML"
    )

@bot.message_handler(commands=["history"])
def cmd_history(message: types.Message):
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booked_at, booking_for
                    FROM bookings
                    ORDER BY booked_at DESC
                    LIMIT 50;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):</b>\n\n"
        for r in rows:
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text += f"#{r['booking_id']} ‚Äî {r['user_name']}, —Å—Ç–æ–ª {r['table_id']}, {r['time_slot']}, {booking_date}\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ—è –±—Ä–æ–Ω—å")
def on_my_booking(message: types.Message):
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, table_id, time_slot, booking_for
                    FROM bookings
                    WHERE user_id=%s AND booking_for > NOW()
                    ORDER BY booked_at DESC
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        if not row:
            user_id = message.from_user.id
            user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.", reply_markup=main_reply_kb(user_id, user_name))
            return
        
        booking_date = row['booking_for'].strftime("%d.%m.%Y")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_{row['booking_id']}"))
        bot.send_message(message.chat.id, f"üîñ –í–∞—à–∞ –±—Ä–æ–Ω—å: —Å—Ç–æ–ª {row['table_id']} –Ω–∞ {row['time_slot']} ({booking_date}).", reply_markup=kb)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

# --- –ù–û–í–û–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ú–ï–ù–Æ ---
@bot.message_handler(func=lambda m: m.text == "üìñ –ú–µ–Ω—é")
def on_menu(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é."""
    kb = types.InlineKeyboardMarkup(row_width=2) 
    
    buttons = []
    for name in MENU_CATEGORIES.keys():
        buttons.append(types.InlineKeyboardButton(name, callback_data=f"menu_cat_{name}"))
        
    kb.add(*buttons)
    
    bot.send_message(
        message.chat.id, 
        "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",
        reply_markup=kb
    )
# -----------------------------------

# =========================
# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# =========================
@bot.message_handler(func=lambda m: m.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def on_admin_panel(message: types.Message):
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booking_for, phone
                    FROM bookings
                    WHERE booking_for > NOW()
                    ORDER BY booking_for ASC;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
            return
        
        for r in rows:
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text = f"üîñ –ë—Ä–æ–Ω—å #{r['booking_id']} ‚Äî {r['user_name']}\n"
            text += f" ¬† - –°—Ç–æ–ª: {r['table_id']}\n"
            text += f" ¬† - –í—Ä–µ–º—è: {r['time_slot']} ({booking_date})\n"
            text += f" ¬† - –¢–µ–ª–µ—Ñ–æ–Ω: {r['phone']}\n"
            
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{r['booking_id']}"))
            bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@bot.message_handler(func=lambda m: m.text == "üóÇ –ò—Å—Ç–æ—Ä–∏—è")
def on_history_btn(message: types.Message):
    return cmd_history(message)

# =========================
# CALLBACKS
# =========================

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é ---
@bot.callback_query_handler(func=lambda c: c.data.startswith("menu_cat_"))
def on_menu_category_select(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ."""
    
    category_name = call.data.split("menu_cat_")[1]
    photo_url = MENU_CATEGORIES.get(category_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏–ª–∏ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(name, callback_data=f"menu_cat_{name}") for name in MENU_CATEGORIES.keys()]
    kb.add(*buttons)
    
    if photo_url:
        try:
            bot.send_photo(
                call.message.chat.id, 
                photo=photo_url,
                caption=f"–†–∞–∑–¥–µ–ª: <b>{category_name}</b>",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            bot.send_message(
                call.message.chat.id, 
                "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=kb
            )

            bot.answer_callback_query(call.id, text=f"–û—Ç–∫—Ä—ã–≤–∞—é: {category_name}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –º–µ–Ω—é ({photo_url}): {e}")
            bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ <b>{category_name}</b>. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", parse_mode="HTML")
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)
            
    else:
        bot.answer_callback_query(call.id, text="–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
# --------------------------------------------------


@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def on_cancel_user(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    try:
        booking_info = None
        rows_deleted = 0
        
        with db_connect() as conn:
            with conn.cursor() as cur:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –î–û —É–¥–∞–ª–µ–Ω–∏—è
                cur.execute("""
                    SELECT user_id, user_name, table_id, time_slot, booking_for, phone, guests
                    FROM bookings
                    WHERE booking_id=%s AND user_id=%s;
                """, (booking_id, call.from_user.id))
                booking_info = cur.fetchone()
                
                # 2. –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                cur.execute("DELETE FROM bookings WHERE booking_id=%s AND user_id=%s;", (booking_id, call.from_user.id))
                rows_deleted = cur.rowcount
                conn.commit()
        
        if rows_deleted > 0:
            bot.edit_message_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
            
            # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if ADMIN_ID and booking_info:
                try:
                    booking_date = booking_info['booking_for'].strftime("%d.%m.%Y")
                    user_id = booking_info['user_id']
                    user_name = booking_info['user_name'] or call.from_user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                    
                    message_text = (
                        f"‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n"
                        f"ID –ë—Ä–æ–Ω–∏: <b>#{booking_id}</b>\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                        f"–°—Ç–æ–ª: {booking_info['table_id']}\n"
                        f"–î–∞—Ç–∞: {booking_date}\n"
                        f"–í—Ä–µ–º—è: {booking_info['time_slot']}\n"
                        f"–ì–æ—Å—Ç–µ–π: {booking_info.get('guests', 'N/A')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                    )
                    bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        else:
            # –ï—Å–ª–∏ 0 —Å—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ (–±—Ä–æ–Ω—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞/–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
            bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@bot.callback_query_handler(func=lambda c: c.data.startswith("admin_cancel_"))
def on_cancel_admin(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[2])
    if not ADMIN_ID or str(call.from_user.id) != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                booking_info = None
                cur.execute("SELECT user_id, table_id, time_slot, booking_for FROM bookings WHERE booking_id=%s;", (booking_id,))
                booking_info = cur.fetchone()

                cur.execute("DELETE FROM bookings WHERE booking_id=%s;", (booking_id,))
                conn.commit()
        
        if booking_info:
            user_id = booking_info['user_id']
            booking_date = booking_info['booking_for'].strftime("%d.%m.%Y")
            message_text = f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–°—Ç–æ–ª: {booking_info['table_id']}\n–î–∞—Ç–∞: {booking_date}\n–í—Ä–µ–º—è: {booking_info['time_slot']}"
            try:
                bot.send_message(user_id, message_text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        bot.edit_message_text(f"–ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
        bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

@bot.message_handler(content_types=['web_app_data'])
def on_webapp_data(message: types.Message):
    print("–ü–†–ò–®–õ–ò –î–ê–ù–ù–´–ï –û–¢ WEBAPP:", message.web_app_data.data)

# =========================
# BOOKING API
# =========================
@app.route("/book", methods=["POST"])
def book_api():
    try:
        data = request.json
        user_id = data.get('user_id') or 0
        user_name = data.get('user_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        phone = data.get('phone')
        guests = data.get('guests')
        table_id = data.get('table')
        time_slot = data.get('time')
        date_str = data.get('date')

        if not all([phone, guests, table_id, time_slot, date_str]):
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"}, 400

        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        booking_datetime = datetime.combine(booking_date, datetime.strptime(time_slot, '%H:%M').time())

        conn = psycopg2.connect(DATABASE_URL)

        with conn.cursor() as cursor:
            # –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢
            cursor.execute(
                "SELECT 1 FROM bookings WHERE table_id = %s AND booking_for::date = %s AND time_slot = %s;",
                (table_id, booking_date, time_slot)
            )
            existing_booking = cursor.fetchone()
            if existing_booking:
                return {"status": "error", "message": "–≠—Ç–æ—Ç —Å—Ç–æ–ª —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è."}, 409
        
        with conn.cursor() as cursor:
            # –°–û–ó–î–ê–ù–ò–ï –ë–†–û–ù–ò
            cursor.execute(
                """
                INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                """,
                (user_id, user_name, phone, table_id, time_slot, guests, datetime.now(), booking_datetime)
            )
            conn.commit()
            
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            formatted_date = booking_date.strftime("%d.%m.%Y")
            message_text = f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n–°—Ç–æ–ª: {table_id}\n–î–∞—Ç–∞: {formatted_date}\n–í—Ä–µ–º—è: {time_slot}"
            bot.send_message(user_id, message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if ADMIN_ID:
            try:
                formatted_date = booking_date.strftime("%d.%m.%Y")
                user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                message_text = (
                    f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                    f"–°—Ç–æ–ª: {table_id}\n"
                    f"–î–∞—Ç–∞: {formatted_date}\n"
                    f"–í—Ä–µ–º—è: {time_slot}\n"
                    f"–ì–æ—Å—Ç–µ–π: {guests}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                )
                bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)

        return {"status": "ok", "message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}, 200

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ /book: {e}")
        return {"status": "error", "message": str(e)}, 400

# =========================
# GET BOOKED TIMES (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤)
# =========================
@app.route("/get_booked_times", methods=["GET"])
def get_booked_times():
    try:
        table_id = request.args.get('table')
        date_str = request.args.get('date')

        if not all([table_id, date_str]):
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞)"}, 400

        try:
            query_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        except ValueError:
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DD."}, 400

        conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT time_slot FROM bookings WHERE table_id = %s AND booking_for::date = %s;",
                (table_id, query_date)
            )
            booked_times = [row['time_slot'] for row in cursor.fetchall()]

        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ —Å 12:00 –¥–æ 23:00 (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
        start_time = datetime.combine(query_date, datetime.strptime("12:00", "%H:%M").time())
        end_time = datetime.combine(query_date, datetime.strptime("23:00", "%H:%M").time())
        current_time = start_time
        all_slots = []
        while current_time <= end_time:
            slot_str = current_time.strftime("%H:%M")
            if slot_str not in booked_times:
                all_slots.append(slot_str)
            current_time += timedelta(minutes=30)

        return {"status": "ok", "free_times": all_slots}, 200

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ /get_booked_times: {e}")
        return {"status": "error", "message": str(e)}, 500

# =========================
# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
# =========================
@app.route("/")
def index():
    return "Bot is running.", 200

@app.route("/set_webhook_manual")
def set_webhook_manual():
    if not RENDER_EXTERNAL_URL:
        return jsonify({"status": "error", "message": "RENDER_EXTERNAL_URL is not set"}), 500
    if not RENDER_EXTERNAL_URL.startswith("https://"):
        return jsonify({"status": "error", "message": "Webhook requires HTTPS"}), 500
    
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    try:
        ok = bot.set_webhook(url=webhook_url)
        if ok:
            return jsonify({"status": "ok", "message": f"Webhook set to {webhook_url}"}), 200
        else:
            return jsonify({"status": "error", "message": "Failed to set webhook"}), 500
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data(as_text=True)
        update = types.Update.de_json(json_string)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ threading, –∫–∞–∫ –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏
        bot.process_new_updates([update]) 
        return "OK", 200
    else:
        return "Invalid content type", 403

# =========================
# MAIN
# =========================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    if not RENDER_EXTERNAL_URL:
        raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
    if not RENDER_EXTERNAL_URL.startswith("https://"):
        raise RuntimeError("–û—à–∏–±–∫–∞: Telegram webhook —Ç—Ä–µ–±—É–µ—Ç HTTPS!")

    try:
        bot.remove_webhook()
        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        ok = bot.set_webhook(url=webhook_url)
        print(f"Webhook set -> {webhook_url} ; ok={ok}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)
    
    app.run(host="0.0.0.0", port=port)