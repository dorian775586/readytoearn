import os
from datetime import datetime, timedelta

import telebot
from telebot import types
import psycopg2
from psycopg2.extras import RealDictCursor
from flask import Flask, request, jsonify
from flask_cors import CORS
import baza


# =========================
# ENV
# =========================
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.environ.get("DATABASE_URL") or "").strip()
ADMIN_ID_ENV = (os.environ.get("ADMIN_ID") or "").strip()
WEBAPP_URL = (os.environ.get("WEBAPP_URL") or "https://gitrepo-drab.vercel.app").strip()

if not BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
if not DATABASE_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")

# –Ø–≤–Ω–æ –¥–æ–±–∞–≤–∏–º –ø–æ—Ä—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ URL –µ–≥–æ –Ω–µ—Ç
if "render.com/" in DATABASE_URL and ":5432" not in DATABASE_URL:
    # –ø–µ—Ä–µ–¥ /dbname –≤—Å—Ç–∞–≤–∏–º :5432, –µ—Å–ª–∏ —Ö–æ—Å—Ç–∞ –±–µ–∑ –ø–æ—Ä—Ç–∞
    # –ø—Ä–∏–º–µ—Ä: ...render.com/whitefoxbd -> ...render.com:5432/whitefoxbd
    DATABASE_URL = DATABASE_URL.replace(".render.com/", ".render.com:5432/")

ADMIN_ID = None
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
    except ValueError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID ('{ADMIN_ID_ENV}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º; –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# =========================
# BOT & APP
# =========================
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)
CORS(app)

# =========================
# DB INIT
# =========================
def db_connect():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def init_db():
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                CREATE TABLE IF NOT EXISTS tables (
                    id INT PRIMARY KEY
                );
                """)
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º TIMESTAMP –¥–ª—è booking_for
                cur.execute("""
                CREATE TABLE IF NOT EXISTS bookings (
                    booking_id SERIAL PRIMARY KEY,
                    table_id INT NOT NULL,
                    time_slot TEXT NOT NULL,
                    booked_at TIMESTAMP NOT NULL,
                    booking_for TIMESTAMP,
                    phone TEXT,
                    guests INT
                );
                """)

                # –ù–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã ‚Äî –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS phone TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guests INT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS booking_for TIMESTAMP;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_id BIGINT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_name TEXT;")


                # –ù–∞–ø–æ–ª–Ω–∏–º —Å—Ç–æ–ª–∏–∫–∏ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ)
                cur.execute("SELECT COUNT(*) AS c FROM tables;")
                c = cur.fetchone()["c"]
                if c == 0:
                    cur.execute("INSERT INTO tables (id) SELECT generate_series(1, 10);")

            conn.commit()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")


# =========================
# HELPERS (UI)
# =========================
def main_reply_kb(user_id: int, user_name: str) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # üåü –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å user_id –∏ user_name
    web_app_url = f"{WEBAPP_URL}?user_id={user_id}&user_name={user_name}"
    
    row1 = [
        types.KeyboardButton("ü¶ä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=types.WebAppInfo(url=web_app_url)),
        types.KeyboardButton("üìã –ú–æ—è –±—Ä–æ–Ω—å"),
    ]
    row2 = [types.KeyboardButton("üìñ –ú–µ–Ω—é")]
    kb.row(*row1)
    kb.row(*row2)
    if ADMIN_ID and user_id == ADMIN_ID:
        kb.row(types.KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è"))
    return kb

# =========================
# COMMANDS
# =========================
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    bot.send_photo(
        message.chat.id,
        photo="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbh6M8aJwxylo8aI1B-ceUHaiOyEnA425a0A&s",
        caption="<b>–†–µ—Å—Ç–æ–±–∞—Ä ¬´–ë–µ–ª—ã–π –õ–∏—Å¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–æ–ª–∏–∫!",
        reply_markup=main_reply_kb(user_id, user_name)
    )

@bot.message_handler(commands=["history"])
def cmd_history(message: types.Message):
    if not ADMIN_ID or message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booked_at, booking_for
                    FROM bookings
                    ORDER BY booked_at DESC
                    LIMIT 50;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):</b>\n\n"
        for r in rows:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text += f"#{r['booking_id']} ‚Äî {r['user_name']}, —Å—Ç–æ–ª {r['table_id']}, {r['time_slot']}, {booking_date}\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# =========================
# TEXT BUTTONS
# =========================
@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ—è –±—Ä–æ–Ω—å")
def on_my_booking(message: types.Message):
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ò–õ–ò –±—É–¥—É—â–∏–µ
                cur.execute("""
                    SELECT booking_id, table_id, time_slot, booking_for
                    FROM bookings
                    WHERE user_id=%s AND (booking_for > NOW() OR DATE(booking_for) = CURRENT_DATE)
                    ORDER BY booked_at DESC
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        if not row:
            user_id = message.from_user.id
            user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.", reply_markup=main_reply_kb(user_id, user_name))
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        booking_date = row['booking_for'].strftime("%d.%m.%Y")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_{row['booking_id']}"))
        bot.send_message(message.chat.id, f"üîñ –í–∞—à–∞ –±—Ä–æ–Ω—å: —Å—Ç–æ–ª {row['table_id']} –Ω–∞ {row['time_slot']} ({booking_date}).", reply_markup=kb)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üìñ –ú–µ–Ω—é")
def on_menu(message: types.Message):
    # –ü–æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ URL —Ñ–æ—Ç–æ –º–µ–Ω—é
    photos = [
        "https://example.com/menu1.jpg",
        "https://example.com/menu2.jpg",
    ]
    for url in photos:
        bot.send_photo(message.chat.id, photo=url)

# –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã
@bot.message_handler(func=lambda m: m.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def on_admin_panel(message: types.Message):
    if not ADMIN_ID or message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booking_for, phone
                    FROM bookings
                    WHERE booking_for > NOW()
                    ORDER BY booking_for ASC;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
            return
        
        for r in rows:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text = f"üîñ –ë—Ä–æ–Ω—å #{r['booking_id']} ‚Äî {r['user_name']}\n"
            text += f"  - –°—Ç–æ–ª: {r['table_id']}\n"
            text += f"  - –í—Ä–µ–º—è: {r['time_slot']} ({booking_date})\n"
            text += f"  - –¢–µ–ª–µ—Ñ–æ–Ω: {r['phone']}\n"
            
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{r['booking_id']}"))
            bot.send_message(message.chat.id, text, reply_markup=kb)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@bot.message_handler(func=lambda m: m.text == "üóÇ –ò—Å—Ç–æ—Ä–∏—è")
def on_history_btn(message: types.Message):
    # —Ç–æ –∂–µ, —á—Ç–æ –∏ /history
    return cmd_history(message)

# =========================
# INLINE CALLBACKS
# =========================
@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def on_cancel_user(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM bookings WHERE booking_id=%s AND user_id=%s;", (booking_id, call.from_user.id))
                conn.commit()
        bot.edit_message_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda c: c.data.startswith("admin_cancel_"))
def on_cancel_admin(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[2])
    if not ADMIN_ID or call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM bookings WHERE booking_id=%s;", (booking_id,))
                conn.commit()
        bot.edit_message_text(f"–ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
        bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# =========================
# CONTACT & WEB_APP DATA
# =========================
@bot.message_handler(content_types=['web_app_data'])
def on_webapp_data(message: types.Message):
    print("–ü–†–ò–®–õ–ò –î–ê–ù–ù–´–ï –û–¢ WEBAPP:", message.web_app_data.data)
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ.")


# =========================
# BOOKING API (–¥–ª—è WebApp / –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
# =========================
@app.route("/book", methods=["POST"])
def book_api():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Web App"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        # –ï—Å–ª–∏ user_id/user_name –ø—É—Å—Ç—ã–µ, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_id = data.get('user_id') or 0
        user_name = data.get('user_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        phone = data.get('phone')
        guests = data.get('guests')
        table_id = data.get('table')
        time_slot = data.get('time')
        date_str = data.get('date')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        if not all([phone, guests, table_id, time_slot, date_str]):
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"}, 400

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ PostgreSQL
        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        booking_datetime = datetime.combine(booking_date, datetime.strptime(time_slot, '%H:%M').time())

        # –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –±–∞–∑–æ–π
        conn = psycopg2.connect(DATABASE_URL)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –ë–†–û–ù–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º booking_for)
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT 1 FROM bookings WHERE table_id = %s AND booking_for::date = %s AND time_slot = %s;",
                (table_id, booking_date, time_slot)
            )
            existing_booking = cursor.fetchone()
            if existing_booking:
                return {"status": "error", "message": "–≠—Ç–æ—Ç —Å—Ç–æ–ª —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è."}, 409
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É
        with conn.cursor() as cursor:
            cursor.execute(
                """
                INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                """,
                (user_id, user_name, phone, table_id, time_slot, guests, datetime.now(), booking_datetime)
            )
            conn.commit()

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        if ADMIN_ID:
            try:
                # –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å (—á–µ—Ä–µ–∑ API):\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–°—Ç–æ–ª: {table_id}\n–í—Ä–µ–º—è: {time_slot}\n–î–∞—Ç–∞: {date_str}\n–ì–æ—Å—Ç–µ–π: {guests}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)

        return {"status": "ok", "message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}, 200

    except Exception as e:
        print("–û—à–∏–±–∫–∞ /book:", e)
        return {"status": "error", "message": str(e)}, 400

@app.route("/get_booked_times", methods=["GET"])
def get_booked_times():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–∞ –∏ –¥–∞—Ç—ã"""
    try:
        table_id = request.args.get('table')
        date_str = request.args.get('date')

        if not all([table_id, date_str]):
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞)"}, 400

        # –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –±–∞–∑–æ–π
        conn = psycopg2.connect(DATABASE_URL)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° (–∏—Å–ø–æ–ª—å–∑—É–µ–º booking_for)
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT time_slot FROM bookings WHERE table_id = %s AND booking_for::date = %s;",
                (table_id, date_str)
            )
            booked_times = [row[0] for row in cursor.fetchall()]
        
        return {"status": "ok", "booked_times": booked_times}, 200

    except Exception as e:
        print("–û—à–∏–±–∫–∞ /get_booked_times:", e)
        return {"status": "error", "message": str(e)}, 400

# =========================
# –ù–û–í–´–ï –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
# =========================
@app.route("/")
def index():
    return "Bot is running.", 200

@app.route("/set_webhook_manual")
def set_webhook_manual():
    external_url = (os.environ.get("RENDER_EXTERNAL_URL") or "").strip()
    if not external_url:
        return jsonify({"status": "error", "message": "RENDER_EXTERNAL_URL is not set"}), 500
    if not external_url.startswith("https://"):
        return jsonify({"status": "error", "message": "Webhook requires HTTPS"}), 500
    
    webhook_url = f"{external_url}/webhook"
    try:
        ok = bot.set_webhook(url=webhook_url)
        if ok:
            return jsonify({"status": "ok", "message": f"Webhook set to {webhook_url}"}), 200
        else:
            return jsonify({"status": "error", "message": "Failed to set webhook"}), 500
    except telebot.apihelper.ApiTelegramException as e:
        return jsonify({"status": "error", "message": str(e)}), 500

# =========================
# TELEGRAM WEBHOOK ROUTE
# =========================
@app.route("/webhook", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö –æ—Ç Telegram"""
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data(as_text=True)
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "OK", 200
    else:
        return "Invalid content type", 403


# =========================
# MAIN / WEBHOOK SETUP
# =========================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    external_url = (os.environ.get("RENDER_EXTERNAL_URL") or "").strip()
    if not external_url:
        raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
    if not external_url.startswith("https://"):
        raise RuntimeError("–û—à–∏–±–∫–∞: Telegram webhook —Ç—Ä–µ–±—É–µ—Ç HTTPS!")

    # –°—Ç–∞–≤–∏–º webhook –Ω–∞ /webhook
    try:
        bot.remove_webhook()
        webhook_url = f"{external_url}/webhook"
        ok = bot.set_webhook(url=webhook_url)
        print(f"Webhook set -> {webhook_url} ; ok={ok}")
    except telebot.apihelper.ApiTelegramException as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)

    app.run(host="0.0.0.0", port=port)