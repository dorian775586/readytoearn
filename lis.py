import os
import logging
from datetime import datetime, timedelta, date, timezone
import requests 
import json 
from dateutil import tz # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

from flask import Flask, request, jsonify
from telebot import TeleBot, types
import psycopg2
from psycopg2.extras import RealDictCursor
from flask_cors import CORS

# =========================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ print, –∏ logging –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
logging.basicConfig(level=logging.INFO)
print("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.") 

# =========================
# ENV
# =========================
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.environ.get("DATABASE_URL") or "").strip()
ADMIN_ID_ENV = (os.environ.get("ADMIN_ID") or "").strip()
WEBAPP_URL = (os.environ.get("WEBAPP_URL") or "https://gitrepo-drab.vercel.app").strip() 
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL") 

print(f"BOT_TOKEN_STATUS: {'SET' if BOT_TOKEN else 'NOT SET'}")
print(f"DATABASE_URL_STATUS: {'SET' if DATABASE_URL else 'NOT SET'}")
print(f"RENDER_EXTERNAL_URL_STATUS: {'SET' if RENDER_EXTERNAL_URL else 'NOT SET'}")

if not BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
if not DATABASE_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")
if not RENDER_EXTERNAL_URL: 
    raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")


if "render.com/" in DATABASE_URL and ":5432" not in DATABASE_URL:
    DATABASE_URL = DATABASE_URL.replace(".render.com/", ".render.com:5432/")

ADMIN_ID = None
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
        print(f"ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADMIN_ID}")
    except ValueError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID ('{ADMIN_ID_ENV}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º; –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# =========================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ú–ï–ù–Æ (–¢–û–õ–¨–ö–û –¢–ï–ö–°–¢)
# =========================
RESTAURANT_NAME = "–ú–∞–º–∞ –•—É–∞–Ω–∞"

MENU_CATEGORIES = [
    "ü•£ –ó–∞–∫—É—Å–∫–∏ (–•–æ–ª–æ–¥–Ω—ã–µ)",
    "üå∂Ô∏è –ó–∞–∫—É—Å–∫–∏ (–ì–æ—Ä—è—á–∏–µ/–°—É–ø—ã)",
    "ü•ó –°–∞–ª–∞—Ç—ã",
    "üçî –ë—É—Ä–≥–µ—Ä—ã",
    "üåØ –°—ç–Ω–¥–≤–∏—á–∏ & –†–æ–ª–ª—ã",
    "üçñ –û—Å–Ω–æ–≤–Ω–æ–µ (–ì–æ–≤—è–¥–∏–Ω–∞)",
    "üêü –û—Å–Ω–æ–≤–Ω–æ–µ (–†—ã–±–∞/–°–≤–∏–Ω–∏–Ω–∞)",
    "üçó –û—Å–Ω–æ–≤–Ω–æ–µ (–ö—É—Ä–∏—Ü–∞/–£—Ç–∫–∞)",
    "ü•© –ü—Ä–µ–º–∏—É–º –°—Ç–µ–π–∫–∏",
    "‚òï –î–µ—Å–µ—Ä—Ç—ã & –ù–∞–ø–∏—Ç–∫–∏",
]

# =========================
# –ú–ï–ù–Æ: —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ
# =========================
MENU_PHOTOS = {
    "ü•£ –ó–∞–∫—É—Å–∫–∏ (–•–æ–ª–æ–¥–Ω—ã–µ)": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu1.jpg"],
    "üå∂Ô∏è –ó–∞–∫—É—Å–∫–∏ (–ì–æ—Ä—è—á–∏–µ/–°—É–ø—ã)": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu2.jpg"],
    "ü•ó –°–∞–ª–∞—Ç—ã": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu3.jpg"],
    "üçî –ë—É—Ä–≥–µ—Ä—ã": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu4.jpg"],
    "üåØ –°—ç–Ω–¥–≤–∏—á–∏ & –†–æ–ª–ª—ã": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu5.jpg"],
    "üçñ –û—Å–Ω–æ–≤–Ω–æ–µ (–ì–æ–≤—è–¥–∏–Ω–∞)": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu6.jpg"],
    "üêü –û—Å–Ω–æ–≤–Ω–æ–µ (–†—ã–±–∞/–°–≤–∏–Ω–∏–Ω–∞)": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu7.jpg"],
    "üçó –û—Å–Ω–æ–≤–Ω–æ–µ (–ö—É—Ä–∏—Ü–∞/–£—Ç–∫–∞)": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu8.jpg"],
    "ü•© –ü—Ä–µ–º–∏—É–º –°—Ç–µ–π–∫–∏": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu9.jpg"],
    "‚òï –î–µ—Å–µ—Ä—Ç—ã & –ù–∞–ø–∏—Ç–∫–∏": ["https://raw.githubusercontent.com/dorian775586/gitrepo/main/public/images/menu10.jpg"],
}

# =========================
# DB INIT
# =========================
def db_connect():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–æ–≤."""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                CREATE TABLE IF NOT EXISTS tables (
                    id INT PRIMARY KEY
                );
                """)
                cur.execute("""
                CREATE TABLE IF NOT EXISTS bookings (
                    booking_id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    user_name VARCHAR(255),
                    phone TEXT,
                    guests INT,
                    table_id INT NOT NULL,
                    time_slot TEXT NOT NULL,
                    booked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    booking_for TIMESTAMP WITH TIME ZONE -- –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ TIMESTAMP WITH TIME ZONE
                );
                """)
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_id BIGINT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_name TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS phone TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guests INT;")
                # –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–∞–∫ TIMESTAMP –±–µ–∑ TZ.
                # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ALTER COLUMN, –Ω–æ –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫.
                # cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS booking_for TIMESTAMP WITH TIME ZONE;") 
                
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_conflict ON bookings (table_id, booking_for);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_user_active ON bookings (user_id, booking_for DESC);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_future_time ON bookings (booking_for);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_booked_at ON bookings (booked_at DESC);")

                TARGET_TABLE_COUNT = 20
                cur.execute("SELECT id FROM tables ORDER BY id ASC;")
                existing_table_ids = [row['id'] for row in cur.fetchall()]
                tables_to_add = [i for i in range(1, TARGET_TABLE_COUNT + 1) if i not in existing_table_ids]
                
                if tables_to_add:
                    insert_values = ",".join(f"({i})" for i in tables_to_add)
                    cur.execute(f"INSERT INTO tables (id) VALUES {insert_values};")
                    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tables_to_add)} –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–æ–≤ (ID: {tables_to_add}).")
                else:
                    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –í—Å–µ —Å—Ç–æ–ª—ã –¥–æ 20 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

            conn.commit()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")

# =========================
# BOT & APP
# =========================
# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: threaded=False, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å Flask/Gunicorn –∏ Webhook.
bot = TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=False) 
app = Flask(__name__)
CORS(app)

with app.app_context(): 
    init_db()

# =========================
# HELPERS (UI)
# =========================
def main_reply_kb(user_id: int, user_name: str) -> types.ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞."""
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # URL –¥–ª—è WebApp –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞/–±—ç–∫—ç–Ω–¥
    web_app_url = f"{WEBAPP_URL}?user_id={user_id}&user_name={user_name}&bot_url={RENDER_EXTERNAL_URL}"
    
    row1 = [
        types.KeyboardButton(text="üóìÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=types.WebAppInfo(url=web_app_url)),
        types.KeyboardButton("üìã –ú–æ—è –±—Ä–æ–Ω—å"),
    ]
    row2 = [types.KeyboardButton("üìñ –ú–µ–Ω—é")]
    kb.row(*row1)
    kb.row(*row2)
    if ADMIN_ID and str(user_id) == str(ADMIN_ID):
        kb.row(types.KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è"))
    return kb

# =========================
# COMMANDS & BUTTONS
# =========================

@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (—Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {message.from_user.id}")
    user_id = message.from_user.id
    user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    try:
        bot.send_message(
            message.chat.id,
            f"<b>–†–µ—Å—Ç–æ—Ä–∞–Ω ¬´{RESTAURANT_NAME}¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–æ–ª–∏–∫ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é! –ò—Å–ø–æ–ª—å–∑—É–π—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É",
            reply_markup=main_reply_kb(user_id, user_name),
            parse_mode="HTML"
        )
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id: {user_id}")
    except Exception as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è user_id: {user_id}: {e}")
        try:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e_inner:
            print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e_inner}")


@bot.message_handler(commands=["history"])
def cmd_history(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /history –æ—Ç user_id: {message.from_user.id}")
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booked_at, booking_for
                    FROM bookings
                    ORDER BY booked_at DESC
                    LIMIT 50;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):</b>\n\n"
        for r in rows:
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text += f"#{r['booking_id']} ‚Äî {r['user_name']}, —Å—Ç–æ–ª {r['table_id']}, {r['time_slot']}, {booking_date}\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


@bot.message_handler(func=lambda m: "–ú–æ—è –±—Ä–æ–Ω—å" in m.text)
def on_my_booking(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ—è –±—Ä–æ–Ω—å' –æ—Ç user_id: {message.from_user.id}")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å NOW()
        local_tz = tz.gettz("Europe/Moscow")
        now_local = datetime.now(tz=local_tz)

        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ò—â–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –±—Ä–æ–Ω—å (booking_for > NOW())
                cur.execute("""
                    SELECT booking_id, table_id, time_slot, booking_for, phone, guests
                    FROM bookings
                    WHERE user_id=%s AND booking_for > NOW()
                    ORDER BY booking_for ASC
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        
        user_id = message.from_user.id
        user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        if not row:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.", reply_markup=main_reply_kb(user_id, user_name))
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ booking_for - timezone aware (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å), to_datetime –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –µ–≥–æ
        booking_for_dt = row['booking_for'].astimezone(local_tz) if row['booking_for'].tzinfo else row['booking_for'] 
        booking_date = booking_for_dt.strftime("%d.%m.%Y")
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_{row['booking_id']}"))
        
        message_text = (
            f"üîñ –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—å:\n"
            f"–°—Ç–æ–ª: <b>{row['table_id']}</b>\n"
            f"–î–∞—Ç–∞: <b>{booking_date}</b>\n"
            f"–í—Ä–µ–º—è: <b>{row['time_slot']}</b>\n"
            f"–ì–æ—Å—Ç–µ–π: {row.get('guests', 'N/A')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {row.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        
        bot.send_message(message.chat.id, 
                         message_text, 
                         parse_mode="HTML",
                         reply_markup=kb)
    except Exception as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –≤ on_my_booking: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda m: "–ú–µ–Ω—é" in m.text)
def on_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–µ–Ω—é' –æ—Ç user_id: {message.from_user.id}")
    kb = types.InlineKeyboardMarkup(row_width=2) 
    
    buttons = []
    for name in MENU_CATEGORIES: 
        buttons.append(types.InlineKeyboardButton(name, callback_data=f"menu_cat_{name}"))
        
    kb.add(*buttons)
    
    try:
        bot.send_message(
            message.chat.id, 
            "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",
            reply_markup=kb
        )
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è user_id: {message.from_user.id}")
    except Exception as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é user_id: {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# =========================
# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# =========================
@bot.message_handler(func=lambda m: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" in m.text)
def on_admin_panel(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –æ—Ç user_id: {message.from_user.id}")
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booking_for, phone
                    FROM bookings
                    WHERE booking_for > NOW()
                    ORDER BY booking_for ASC;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
            return
        
        for r in rows:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            local_tz = tz.gettz("Europe/Moscow")
            booking_for_dt = r['booking_for'].astimezone(local_tz) if r['booking_for'].tzinfo else r['booking_for']
            booking_date = booking_for_dt.strftime("%d.%m.%Y")
            
            text = f"üîñ –ë—Ä–æ–Ω—å #{r['booking_id']} ‚Äî {r['user_name']}\n"
            text += f"   - –°—Ç–æ–ª: {r['table_id']}\n"
            text += f"   - –í—Ä–µ–º—è: {r['time_slot']} ({booking_date})\n"
            text += f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {r['phone']}\n"
            
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{r['booking_id']}"))
            bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@bot.message_handler(func=lambda m: "–ò—Å—Ç–æ—Ä–∏—è" in m.text)
def on_history_btn(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ò—Å—Ç–æ—Ä–∏–∏."""
    return cmd_history(message)

# =========================
# CALLBACKS
# =========================
@bot.callback_query_handler(func=lambda c: c.data.startswith("menu_cat_"))
def on_menu_category_select(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é '{call.data}' –æ—Ç user_id: {call.from_user.id}")
    category_name = call.data.split("menu_cat_")[1]

    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(name, callback_data=f"menu_cat_{name}") for name in MENU_CATEGORIES]
    kb.add(*buttons)

    try:
        photos = MENU_PHOTOS.get(category_name, [])
        if photos:
            for url in photos:
                bot.send_photo(call.message.chat.id, url)
        else:
            bot.send_message(call.message.chat.id, f"–†–∞–∑–¥–µ–ª <b>{category_name}</b> –ø–æ–∫–∞ –ø—É—Å—Ç.", parse_mode="HTML")

        bot.send_message(
            call.message.chat.id,
            "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=kb
        )

        bot.answer_callback_query(call.id, text=f"–û—Ç–∫—Ä—ã–≤–∞—é: {category_name}")
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' user_id: {call.from_user.id}")

    except Exception as e:
        logging.error(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –¥–ª—è user_id: {call.from_user.id}: {e}")
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ <b>{category_name}</b>.", parse_mode="HTML")
        bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)


@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def on_cancel_user(call: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{call.data}' –æ—Ç user_id: {call.from_user.id}")
    booking_id = int(call.data.split("_")[1])
    try:
        booking_info = None
        rows_deleted = 0
        
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                cur.execute("""
                    SELECT user_id, user_name, table_id, time_slot, booking_for, phone, guests
                    FROM bookings
                    WHERE booking_id=%s AND user_id=%s;
                """, (booking_id, call.from_user.id))
                booking_info = cur.fetchone()
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                cur.execute("DELETE FROM bookings WHERE booking_id=%s AND user_id=%s;", (booking_id, call.from_user.id))
                rows_deleted = cur.rowcount
                conn.commit()
        
        if rows_deleted > 0:
            bot.edit_message_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
            print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ë—Ä–æ–Ω—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
            
            if ADMIN_ID and booking_info:
                try:
                    local_tz = tz.gettz("Europe/Moscow")
                    booking_for_dt = booking_info['booking_for'].astimezone(local_tz) if booking_info['booking_for'].tzinfo else booking_info['booking_for']
                    booking_date = booking_for_dt.strftime("%d.%m.%Y")
                    user_id = booking_info['user_id']
                    user_name = booking_info['user_name'] or call.from_user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                    
                    message_text = (
                        f"‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n"
                        f"ID –ë—Ä–æ–Ω–∏: <b>#{booking_id}</b>\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                        f"–°—Ç–æ–ª: {booking_info['table_id']}\n"
                        f"–î–∞—Ç–∞: {booking_date}\n"
                        f"–í—Ä–µ–º—è: {booking_info['time_slot']}\n"
                        f"–ì–æ—Å—Ç–µ–π: {booking_info.get('guests', 'N/A')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                    )
                    bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
                    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏ #{booking_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                except Exception as e:
                    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        else:
            bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é/—É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –±—Ä–æ–Ω—å #{booking_id}")
            
    except Exception as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id} –±—Ä–æ–Ω–∏ #{booking_id}: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@bot.callback_query_handler(func=lambda c: c.data.startswith("admin_cancel_"))
def on_cancel_admin(call: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–æ–º '{call.data}' –æ—Ç user_id: {call.from_user.id}")
    booking_id = int(call.data.split("_")[2])
    if not ADMIN_ID or str(call.from_user.id) != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    try:
        booking_info = None
        
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                cur.execute("SELECT user_id, user_name, table_id, time_slot, booking_for, phone FROM bookings WHERE booking_id=%s;", (booking_id,))
                booking_info = cur.fetchone()

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                cur.execute("DELETE FROM bookings WHERE booking_id=%s;", (booking_id,))
                conn.commit()
        
        if booking_info:
            user_id = booking_info['user_id']
            local_tz = tz.gettz("Europe/Moscow")
            booking_for_dt = booking_info['booking_for'].astimezone(local_tz) if booking_info['booking_for'].tzinfo else booking_info['booking_for']
            booking_date = booking_for_dt.strftime("%d.%m.%Y")
            
            message_text = f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–°—Ç–æ–ª: {booking_info['table_id']}\n–î–∞—Ç–∞: {booking_date}\n–í—Ä–µ–º—è: {booking_info['time_slot']}"
            try:
                bot.send_message(user_id, message_text)
                print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏ #{booking_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        bot.edit_message_text(f"–ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
        bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ë—Ä–æ–Ω—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {call.from_user.id}")
    except Exception as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–æ–º {call.from_user.id} –±—Ä–æ–Ω–∏ #{booking_id}: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

@bot.message_handler(content_types=['web_app_data'])
def on_webapp_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—à–µ–¥—à–∏—Ö –∏–∑ WebApp."""
    print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –ü–†–ò–®–õ–ò –î–ê–ù–ù–´–ï –û–¢ WEBAPP: {message.web_app_data.data}") 
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        phone = data.get('phone')
        guests = data.get('guests')
        table_id = data.get('table')
        time_slot = data.get('time')
        date_str = data.get('date')

        if not all([phone, guests, table_id, time_slot, date_str]):
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ WebApp.")
            return

        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        # –°–æ–∑–¥–∞–µ–º datetime —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º, —á—Ç–æ–±—ã Postgres –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å NOW()
        booking_datetime_naive = datetime.combine(booking_date, datetime.strptime(time_slot, '%H:%M').time())
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ TZ-aware DB –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–≤–µ–ª—Å—è –≤ UTC
        local_tz = tz.gettz("Europe/Moscow")
        booking_datetime = booking_datetime_naive.replace(tzinfo=local_tz)


        with db_connect() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç: —Å—Ç–æ–ª, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
                cursor.execute(
                    "SELECT 1 FROM bookings WHERE table_id = %s AND booking_for::date = %s AND time_slot = %s;",
                    (table_id, booking_date, time_slot)
                )
                existing_booking = cursor.fetchone()
                if existing_booking:
                    bot.send_message(user_id, f"–°—Ç–æ–ª {table_id} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {date_str} {time_slot}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
                    return
            
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                    """,
                    # –í–∞–∂–Ω–æ: booking_datetime —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
                    (user_id, user_name, phone, table_id, time_slot, guests, datetime.now(tz=local_tz), booking_datetime)
                )
                conn.commit()
            
            formatted_date = booking_date.strftime("%d.%m.%Y")
            message_text = f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n–°—Ç–æ–ª: {table_id}\n–î–∞—Ç–∞: {formatted_date}\n–í—Ä–µ–º—è: {time_slot}"
            bot.send_message(user_id, message_text)

            if ADMIN_ID:
                user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                admin_message_text = (
                    f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                    f"–°—Ç–æ–ª: {table_id}\n"
                    f"–î–∞—Ç–∞: {formatted_date}\n"
                    f"–í—Ä–µ–º—è: {time_slot}\n"
                    f"–ì–æ—Å—Ç–µ–π: {guests}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                )
                bot.send_message(ADMIN_ID, admin_message_text, parse_mode="HTML")

    except json.JSONDecodeError as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ WebApp: {e}")
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"[{datetime.now()}] (–û–±—Ä–∞–±–æ—Ç—á–∏–∫) –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# =========================
# BOOKING API
# =========================
@app.route("/book", methods=["POST"])
def book_api():
    """API –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WebApp)."""
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /book")
    try:
        data = request.json
        user_id = data.get('user_id') or 0
        user_name = data.get('user_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        phone = data.get('phone')
        guests = data.get('guests')
        table_id = data.get('table')
        time_slot = data.get('time')
        date_str = data.get('date')

        if not all([phone, guests, table_id, time_slot, date_str]):
            print(f"[{datetime.now()}] –û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"}, 400

        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        booking_datetime_naive = datetime.combine(booking_date, datetime.strptime(time_slot, '%H:%M').time())
        local_tz = tz.gettz("Europe/Moscow")
        booking_datetime = booking_datetime_naive.replace(tzinfo=local_tz)



        with db_connect() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM bookings WHERE table_id = %s AND booking_for::date = %s AND time_slot = %s;",
                    (table_id, booking_date, time_slot)
                )
                existing_booking = cursor.fetchone()
                if existing_booking:
                    print(f"[{datetime.now()}] –û—à–∏–±–∫–∞: –°—Ç–æ–ª {table_id} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {date_str} {time_slot}.")
                    return {"status": "error", "message": "–≠—Ç–æ—Ç —Å—Ç–æ–ª —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è."}, 409
            
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                    """,
                    (user_id, user_name, phone, table_id, time_slot, guests, datetime.now(tz=local_tz), booking_datetime)
                )
                conn.commit()
                print(f"[{datetime.now()}] –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id: {user_id}, —Å—Ç–æ–ª: {table_id}, –≤—Ä–µ–º—è: {time_slot} {date_str}")
                
            try:
                formatted_date = booking_date.strftime("%d.%m.%Y")
                message_text = f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n–°—Ç–æ–ª: {table_id}\n–î–∞—Ç–∞: {formatted_date}\n–í—Ä–µ–º—è: {time_slot}"
                bot.send_message(user_id, message_text)
                print(f"[{datetime.now()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –±—Ä–æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            if ADMIN_ID:
                try:
                    formatted_date = booking_date.strftime("%d.%m.%Y")
                    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                    message_text = (
                        f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                        f"–°—Ç–æ–ª: {table_id}\n"
                        f"–î–∞—Ç–∞: {formatted_date}\n"
                        f"–í—Ä–µ–º—è: {time_slot}\n"
                        f"–ì–æ—Å—Ç–µ–π: {guests}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                    )
                    bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
                    print(f"[{datetime.now()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                except Exception as e:
                    print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

        return {"status": "ok", "message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}, 200

    except Exception as e:
        logging.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ /book: {e}", exc_info=True)
        return {"status": "error", "message": str(e)}, 400

# =========================
# GET BOOKED TIMES
# =========================
@app.route("/get_booked_times", methods=["GET"])
def get_booked_times():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."""
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /get_booked_times")
    try:
        table_id = request.args.get('table')
        date_str = request.args.get('date')

        if not all([table_id, date_str]):
            print(f"[{datetime.now()}] –û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞) –¥–ª—è get_booked_times.")
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞)"}, 400

        try:
            query_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        except ValueError:
            print(f"[{datetime.now()}] –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è get_booked_times.")
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DD."}, 400

        with db_connect() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT time_slot FROM bookings WHERE table_id = %s AND booking_for::date = %s;",
                    (table_id, query_date)
                )
                booked_times = [row['time_slot'] for row in cursor.fetchall()]
        
        # –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        local_tz = tz.gettz("Europe/Moscow")
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        start_time_naive = datetime.combine(query_date, datetime.strptime("12:00", "%H:%M").time())
        end_time_naive = datetime.combine(query_date, datetime.strptime("23:00", "%H:%M").time())
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        current_time = start_time_naive.replace(tzinfo=local_tz)
        end_time = end_time_naive.replace(tzinfo=local_tz)

        all_slots = []
        now_local = datetime.now(tz=local_tz)
        
        while current_time <= end_time:
            slot_str = current_time.strftime("%H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –ø—Ä–æ—à–µ–ª –°–ï–ì–û–î–ù–Ø
            if current_time < now_local + timedelta(minutes=30): # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –≤ 60 –º–∏–Ω—É—Ç
                current_time += timedelta(minutes=30)
                continue 
            
            if slot_str not in booked_times:
                all_slots.append(slot_str)
            current_time += timedelta(minutes=30)
        
        print(f"[{datetime.now()}] get_booked_times: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(all_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–∞ {table_id} –Ω–∞ {date_str}.") 
        return {"status": "ok", "free_times": all_slots}, 200

    except Exception as e:
        logging.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ /get_booked_times: {e}", exc_info=True)
        return {"status": "error", "message": str(e)}, 500
        
# =========================
# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã Flask
# =========================
@app.route("/")
def index():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return "Bot is running.", 200

@app.route("/set_webhook_manual")
def set_webhook_manual():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)."""
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /set_webhook_manual") 
    if not RENDER_EXTERNAL_URL:
        return jsonify({"status": "error", "message": "RENDER_EXTERNAL_URL is not set"}), 500
    if not RENDER_EXTERNAL_URL.startswith("https://"):
        return jsonify({"status": "error", "message": "Webhook requires HTTPS"}), 500
    
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    try:
        # –£–î–ê–õ–ï–ù–ò–ï + –£–°–¢–ê–ù–û–í–ö–ê
        bot.remove_webhook() 
        print(f"[{datetime.now()}] –°—Ç–∞—Ä—ã–π Webhook —É–¥–∞–ª–µ–Ω.") 
        ok = bot.set_webhook(url=webhook_url)
        print(f"[{datetime.now()}] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook –Ω–∞ {webhook_url}; –†–µ–∑—É–ª—å—Ç–∞—Ç: {ok}") 
        if ok:
            return jsonify({"status": "ok", "message": f"Webhook set to {webhook_url}"}), 200
        else:
            return jsonify({"status": "error", "message": "Failed to set webhook"}), 500
    except Exception as e:
        print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook –≤—Ä—É—á–Ω—É—é: {e}") 
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –±–æ—Ç—É."""
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook") 
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data(as_text=True)
        # !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON –≤ –æ–±—ä–µ–∫—Ç Update –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–º
        try:
            update = types.Update.de_json(json_string)
            bot.process_new_updates([update])
            print(f"[{datetime.now()}] Webhook: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return "!", 200 # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 200 OK –¥–ª—è Telegram
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –ø—ã—Ç–∞–ª—Å—è —Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.
            print(f"[{datetime.now()}] Webhook: –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø: {e}")
            return "!", 200
    else:
        print(f"[{datetime.now()}] Webhook: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ-JSON –¥–∞–Ω–Ω—ã–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É—é.")
        return "Non-JSON data received", 403

# =========================
# –ó–ê–ü–£–°–ö
# =========================
# –í —Ä–µ–∂–∏–º–µ Render/Gunicorn –∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç Gunicorn)