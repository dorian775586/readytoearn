import os
from datetime import datetime, timedelta

import telebot
from telebot import types
import psycopg2
from psycopg2.extras import RealDictCursor
from flask import Flask, request
from flask_cors import CORS
import baza


# =========================
# ENV
# =========================
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.environ.get("DATABASE_URL") or "").strip()
ADMIN_ID_ENV = (os.environ.get("ADMIN_ID") or "").strip()
WEBAPP_URL = (os.environ.get("WEBAPP_URL") or "https://gitrepo-drab.vercel.app").strip()

if not BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
if not DATABASE_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")

# –Ø–≤–Ω–æ –¥–æ–±–∞–≤–∏–º –ø–æ—Ä—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ URL –µ–≥–æ –Ω–µ—Ç
if "render.com/" in DATABASE_URL and ":5432" not in DATABASE_URL:
    # –ø–µ—Ä–µ–¥ /dbname –≤—Å—Ç–∞–≤–∏–º :5432, –µ—Å–ª–∏ —Ö–æ—Å—Ç–∞ –±–µ–∑ –ø–æ—Ä—Ç–∞
    # –ø—Ä–∏–º–µ—Ä: ...render.com/whitefoxbd -> ...render.com:5432/whitefoxbd
    DATABASE_URL = DATABASE_URL.replace(".render.com/", ".render.com:5432/")

ADMIN_ID = None
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
    except ValueError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID ('{ADMIN_ID_ENV}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º; –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# =========================
# BOT & APP
# =========================
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)
CORS(app)




# =========================
# HELPERS (UI)
# =========================
def main_reply_kb(user_id: int) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row1 = [
        types.KeyboardButton("ü¶ä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üìã –ú–æ—è –±—Ä–æ–Ω—å"),
    ]
    row2 = [types.KeyboardButton("üìñ –ú–µ–Ω—é")]
    row3 = [types.KeyboardButton("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", web_app=types.WebAppInfo(url=WEBAPP_URL))]
    kb.row(*row1)
    kb.row(*row2)
    kb.row(*row3)
    if ADMIN_ID and user_id == ADMIN_ID:
        kb.row(types.KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è"))
    return kb

def get_time_slots():
    slots = []
    start = datetime.strptime("12:00", "%H:%M")
    end = datetime.strptime("23:00", "%H:%M")
    while start <= end:
        slots.append(start.strftime("%H:%M"))
        start += timedelta(minutes=30)
    return slots

def build_tables_inline():
    markup = types.InlineKeyboardMarkup(row_width=2)
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT id FROM tables ORDER BY id;")
                rows = cur.fetchall()
        buttons = [types.InlineKeyboardButton(text=f"ü™ë –°—Ç–æ–ª {r['id']}", callback_data=f"book_{r['id']}") for r in rows]
        # —Ä–∞–∑–ª–æ–∂–∏–º –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buttons), 2):
            markup.row(*buttons[i:i+2])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ build_tables_inline:", e)
    return markup

def build_time_inline(table_id: int):
    markup = types.InlineKeyboardMarkup(row_width=3)
    busy = set()
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT time_slot FROM bookings
                    WHERE table_id=%s AND (booking_for IS NULL OR booking_for > NOW());
                """, (table_id,))
                rows = cur.fetchall()
                busy = {r["time_slot"] for r in rows}
    except Exception as e:
        print("–û—à–∏–±–∫–∞ build_time_inline:", e)

    free_slots = [s for s in get_time_slots() if s not in busy]
    buttons = [types.InlineKeyboardButton(text=s, callback_data=f"time_{table_id}_{s}") for s in free_slots]
    # –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        markup.row(*buttons[i:i+3])
    return markup

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ –ø–æ —é–∑–µ—Ä—É (–ø—Ä–æ—Å—Ç–∞—è in-memory ¬´FSM¬ª)
user_flow = {}  # user_id -> {"table_id": int, "time_slot": "HH:MM", "guests": int}

# =========================
# COMMANDS
# =========================
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    bot.send_photo(
        message.chat.id,
        photo="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbh6M8aJwxylo8aI1B-ceUHaiOyEnA425a0A&s",
        caption="<b>–†–µ—Å—Ç–æ–±–∞—Ä ¬´–ë–µ–ª—ã–π –õ–∏—Å¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–æ–ª–∏–∫!",
        reply_markup=main_reply_kb(message.from_user.id)
    )

@bot.message_handler(commands=["history"])
def cmd_history(message: types.Message):
    if not ADMIN_ID or message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booked_at
                    FROM bookings
                    ORDER BY booked_at DESC
                    LIMIT 50;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):</b>\n\n"
        for r in rows:
            text += f"#{r['booking_id']} ‚Äî {r['user_name']}, —Å—Ç–æ–ª {r['table_id']}, {r['time_slot']}, {r['booked_at']}\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# =========================
# TEXT BUTTONS
# =========================
@bot.message_handler(func=lambda m: m.text == "ü¶ä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
def on_book_btn(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –±—Ä–æ–Ω—å
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT 1 FROM bookings
                    WHERE user_id=%s AND (booking_for IS NULL OR booking_for > NOW())
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        if row:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—å.", reply_markup=main_reply_kb(message.from_user.id))
            return
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏:", e)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=build_tables_inline())

@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ—è –±—Ä–æ–Ω—å")
def on_my_booking(message: types.Message):
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, table_id, time_slot
                    FROM bookings
                    WHERE user_id=%s AND (booking_for IS NULL OR booking_for::timestamp > NOW())
                    ORDER BY booked_at DESC
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        if not row:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.", reply_markup=main_reply_kb(message.from_user.id))
            return

        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_{row['booking_id']}"))
        bot.send_message(message.chat.id, f"üîñ –í–∞—à–∞ –±—Ä–æ–Ω—å: —Å—Ç–æ–ª {row['table_id']} –Ω–∞ {row['time_slot']}.", reply_markup=kb)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üìñ –ú–µ–Ω—é")
def on_menu(message: types.Message):
    # –ü–æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ URL —Ñ–æ—Ç–æ –º–µ–Ω—é
    photos = [
        "https://example.com/menu1.jpg",
        "https://example.com/menu2.jpg",
    ]
    for url in photos:
        bot.send_photo(message.chat.id, photo=url)

@bot.message_handler(func=lambda m: m.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def on_admin_panel(message: types.Message):
    if not ADMIN_ID or message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ø–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ üôÇ", reply_markup=main_reply_kb(message.from_user.id))

@bot.message_handler(func=lambda m: m.text == "üóÇ –ò—Å—Ç–æ—Ä–∏—è")
def on_history_btn(message: types.Message):
    # —Ç–æ –∂–µ, —á—Ç–æ –∏ /history
    return cmd_history(message)

# =========================
# INLINE CALLBACKS
# =========================
@bot.callback_query_handler(func=lambda c: c.data.startswith("book_"))
def on_pick_table(call: types.CallbackQuery):
    table_id = int(call.data.split("_")[1])
    user_flow[call.from_user.id] = {"table_id": table_id}
    bot.edit_message_text(f"–°—Ç–æ–ª {table_id} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", chat_id=call.message.chat.id,
                          message_id=call.message.id, reply_markup=build_time_inline(table_id))

@bot.callback_query_handler(func=lambda c: c.data.startswith("time_"))
def on_pick_time(call: types.CallbackQuery):
    _, table_id, slot = call.data.split("_")
    u = user_flow.get(call.from_user.id, {})
    u.update({"table_id": int(table_id), "time_slot": slot})
    user_flow[call.from_user.id] = u

    # —Å–ø—Ä–æ—Å–∏–º –≥–æ—Å—Ç–µ–π –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª
    bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ–ª {table_id} –Ω–∞ {slot}. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π?",
        chat_id=call.message.chat.id, message_id=call.message.id
    )

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def on_cancel(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM bookings WHERE booking_id=%s;", (booking_id,))
                conn.commit()
        bot.edit_message_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# =========================
# CONTACT & WEB_APP DATA
# =========================
@bot.message_handler(content_types=['contact'])
def on_contact(message: types.Message):
    # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —Å—Ç–æ–ª/–≤—Ä–µ–º—è –∏ –≤–≤—ë–ª —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (–∏–ª–∏ –ø—Ä–∏—à–ª—ë—Ç –∏—Ö —Ç–µ–∫—Å—Ç–æ–º)
    # guests –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–ª —á–∏—Å–ª–æ
    u = user_flow.get(message.from_user.id, {})
    if "guests" not in u:
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–ª—å–∑—è –Ω–∞–¥—ë–∂–Ω–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —è–≤–Ω–æ
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (—á–∏—Å–ª–æ–º):")
        # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ –∂–¥—ë–º –≥–æ—Å—Ç–µ–π
        u["await_guests"] = True
        user_flow[message.from_user.id] = u
        return

    phone = message.contact.phone_number
    finalize_booking(message, phone)

@bot.message_handler(func=lambda m: True, content_types=['text'])
def on_free_text(message: types.Message):
    # –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –º—ã –µ–≥–æ –∂–¥—ë–º
    u = user_flow.get(message.from_user.id, {})
    if u.get("await_guests"):
        txt = (message.text or "").strip()
        if txt.isdigit() and int(txt) > 0:
            u["guests"] = int(txt)
            u.pop("await_guests", None)
            user_flow[message.from_user.id] = u
            # —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
            bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=kb)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2).")
        return

    # –ø—Ä–æ—á–∏–µ —Ç–µ–∫—Å—Ç—ã ‚Äî –∏–≥–Ω–æ—Ä/–≤–æ–∑–≤—Ä–∞—Ç –º–µ–Ω—é
    if message.text not in ["ü¶ä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "üìã –ú–æ—è –±—Ä–æ–Ω—å", "üìñ –ú–µ–Ω—é", "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üóÇ –ò—Å—Ç–æ—Ä–∏—è"]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", reply_markup=main_reply_kb(message.from_user.id))

@bot.message_handler(content_types=['web_app_data'])
def on_webapp_data(message: types.Message):
    print("–ü–†–ò–®–õ–ò –î–ê–ù–ù–´–ï –û–¢ WEBAPP:", message.web_app_data.data)
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ.")


def finalize_booking(message: types.Message, phone: str):
    u = user_flow.get(message.from_user.id, {})
    table_id = u.get("table_id")
    time_slot = u.get("time_slot")
    guests = u.get("guests")

    if not (table_id and time_slot and guests):
        bot.send_message(message.chat.id, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ ¬´ü¶ä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª.")
        return

    now = datetime.now()
    booking_for = now.replace(hour=int(time_slot[:2]), minute=int(time_slot[3:]), second=0, microsecond=0)
    if booking_for < now:
        booking_for += timedelta(days=1)

    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                """, (message.from_user.id, message.from_user.full_name, phone, table_id, time_slot, guests, datetime.now(), booking_for))
                conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: —Å—Ç–æ–ª {table_id}, –≤—Ä–µ–º—è {time_slot}, –≥–æ—Å—Ç–µ–π: {guests}",
                         reply_markup=main_reply_kb(message.from_user.id))
        if ADMIN_ID:
            bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n–°—Ç–æ–ª: {table_id}\n–í—Ä–µ–º—è: {time_slot}\n–ì–æ—Å—Ç–µ–π: {guests}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
        user_flow.pop(message.from_user.id, None)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# =========================
# WEBHOOK (Flask)
# =========================
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") != "application/json":
        return "Unsupported Media Type", 415
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

   # =========================
# BOOKING API (–¥–ª—è WebApp / –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
# =========================
@app.route("/book", methods=["POST"])
def book_api():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Web App"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        # –ï—Å–ª–∏ user_id/user_name –ø—É—Å—Ç—ã–µ, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_id = data.get('user_id') or 0         # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û
        user_name = data.get('user_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û
        phone = data.get('phone')
        guests = data.get('guests')
        table_id = data.get('table')
        time_slot = data.get('time')
        date_str = data.get('date')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        if not all([phone, guests, table_id, time_slot, date_str]):
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"}, 400

        # –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –±–∞–∑–æ–π
        conn = psycopg2.connect(DATABASE_URL)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±—Ä–æ–Ω–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        booking_for = f"–°—Ç–æ–ª {table_id} –Ω–∞ {guests} —á–µ–ª. –≤ {time_slot}"
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ PostgreSQL
        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        booking_datetime = datetime.combine(booking_date, datetime.strptime(time_slot, '%H:%M').time())

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É
        with conn.cursor() as cursor:
            cursor.execute(
                """
                INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                """,
                (user_id, user_name, phone, table_id, time_slot, guests, datetime.now(), booking_datetime)
            )
            conn.commit()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ book_api

@app.route("/get_booked_times", methods=["GET"])
def get_booked_times():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–∞ –∏ –¥–∞—Ç—ã"""
    try:
        table_id = request.args.get('table')
        date_str = request.args.get('date')

        if not all([table_id, date_str]):
            return {"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞)"}, 400

        # –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –±–∞–∑–æ–π
        conn = psycopg2.connect(DATABASE_URL)
        
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT time_slot FROM bookings WHERE table_id = %s AND booked_at::date = %s;",
                (table_id, date_str)
            )
            booked_times = [row[0] for row in cursor.fetchall()]
        
        return {"status": "ok", "booked_times": booked_times}, 200

    except Exception as e:
        print("–û—à–∏–±–∫–∞ /get_booked_times:", e)
        return {"status": "error", "message": str(e)}, 400
        
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        if ADMIN_ID:
            try:
                bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å (—á–µ—Ä–µ–∑ API):\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–°—Ç–æ–ª: {table_id}\n–í—Ä–µ–º—è: {time_slot}\n–ì–æ—Å—Ç–µ–π: {guests}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)

        return {"status": "ok", "message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}, 200

    except Exception as e:
        print("–û—à–∏–±–∫–∞ /book:", e)
        return {"status": "error", "message": str(e)}, 400

# =========================
# MAIN / WEBHOOK SETUP
# =========================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    external_url = (os.environ.get("RENDER_EXTERNAL_URL") or "").strip()
    if not external_url:
        raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
    if not external_url.startswith("https://"):
        raise RuntimeError("–û—à–∏–±–∫–∞: Telegram webhook —Ç—Ä–µ–±—É–µ—Ç HTTPS!")

    # –°—Ç–∞–≤–∏–º webhook –Ω–∞ /webhook
    try:
        bot.remove_webhook()
        webhook_url = f"{external_url}/webhook"
        ok = bot.set_webhook(url=webhook_url)
        print(f"Webhook set -> {webhook_url} ; ok={ok}")
    except telebot.apihelper.ApiTelegramException as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)

    app.run(host="0.0.0.0", port=port)
