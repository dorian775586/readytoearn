import os
import logging
from datetime import datetime, timedelta, date

from flask import Flask, request, jsonify
from telebot import TeleBot, types
import psycopg2
from psycopg2.extras import RealDictCursor
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# =========================
# ENV
# =========================
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.environ.get("DATABASE_URL") or "").strip()
ADMIN_ID_ENV = (os.environ.get("ADMIN_ID") or "").strip()
WEBAPP_URL = (os.environ.get("WEBAPP_URL") or "https://gitrepo-drab.vercel.app").strip()
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

if not BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
if not DATABASE_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")
if not RENDER_EXTERNAL_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")

# –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL/—Ç–æ–∫–µ–Ω–æ–≤
if RENDER_EXTERNAL_URL:
    RENDER_EXTERNAL_URL = RENDER_EXTERNAL_URL.strip()
if WEBAPP_URL:
    WEBAPP_URL = WEBAPP_URL.strip()

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤ PostgreSQL
if "render.com/" in DATABASE_URL and ":5432" not in DATABASE_URL:
    DATABASE_URL = DATABASE_URL.replace(".render.com/", ".render.com:5432/")

ADMIN_ID = None
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
    except ValueError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID ('{ADMIN_ID_ENV}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º; –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# =========================
# BOT & APP
# =========================
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)
CORS(app)

# =========================
# DB INIT
# =========================
def db_connect():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º RealDictCursor –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    return psycopg2.connect(
        DATABASE_URL, 
        cursor_factory=RealDictCursor,
        sslmode='require' 
    )

def init_db():
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                CREATE TABLE IF NOT EXISTS tables (
                    id INT PRIMARY KEY
                );
                """)
                cur.execute("""
                CREATE TABLE IF NOT EXISTS bookings (
                    booking_id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    user_name VARCHAR(255),
                    phone TEXT,
                    guests INT,
                    table_id INT NOT NULL,
                    time_slot TEXT NOT NULL,
                    booked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    booking_for TIMESTAMP
                );
                """)
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_id BIGINT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS user_name TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS phone TEXT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guests INT;")
                cur.execute("ALTER TABLE bookings ADD COLUMN IF NOT EXISTS booking_for TIMESTAMP;")

                cur.execute("SELECT COUNT(*) AS c FROM tables;")
                c = cur.fetchone()["c"]
                if c == 0:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–æ–ª—ã —Å ID 1 –ø–æ 10
                    cur.execute("INSERT INTO tables (id) SELECT generate_series(1, 10);")

            conn.commit()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")

# =========================
# HELPERS (UI)
# =========================
def main_reply_kb(user_id: int, user_name: str) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    cleaned_webapp_url = WEBAPP_URL.rstrip('/')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    web_app_url = (
        f"{cleaned_webapp_url}?user_id={user_id}&user_name={user_name}&bot_url={RENDER_EXTERNAL_URL}"
    )
    
    print(f"DEBUG: WebApp URL, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤ Telegram: {web_app_url}")
    
    row1 = [
        types.KeyboardButton("ü¶ä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=types.WebAppInfo(url=web_app_url)),
        types.KeyboardButton("üìã –ú–æ—è –±—Ä–æ–Ω—å"),
    ]
    row2 = [types.KeyboardButton("üìñ –ú–µ–Ω—é")]
    kb.row(*row1)
    kb.row(*row2)
    if ADMIN_ID and str(user_id) == str(ADMIN_ID):
        kb.row(types.KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è"))
    return kb

# =========================
# COMMANDS
# =========================
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    try:
        bot.send_photo(
            message.chat.id,
            photo="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbh6M8aJwxylo8aI1B-ceUHaiOyEnA425a0A&s",
            caption="<b>–†–µ—Å—Ç–æ–±–∞—Ä ¬´–ë–µ–ª—ã–π –õ–∏—Å¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–æ–ª–∏–∫!",
            reply_markup=main_reply_kb(user_id, user_name),
            parse_mode="HTML"
        )
        print(f"*** –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û /START –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user_id} ***")

    except Exception as e:
        logging.error(f"–û–®–ò–ë–ö–ê –í CMD_START –¥–ª—è user {user_id}: {e}")
        
        try:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
            bot.send_message(
                message.chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ–Ω—é. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
                     "<b>–†–µ—Å—Ç–æ–±–∞—Ä ¬´–ë–µ–ª—ã–π –õ–∏—Å¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n"
                     "–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'.",
                reply_markup=main_reply_kb(user_id, user_name),
                parse_mode="HTML"
            )
            print(f"*** –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û –¢–ï–ö–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user_id} ***")
        except Exception as text_e:
            logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –û–¢–í–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user_id}: {text_e}")
            
@bot.message_handler(commands=["history"])
def cmd_history(message: types.Message):
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booked_at, booking_for
                    FROM bookings
                    ORDER BY booked_at DESC
                    LIMIT 50;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):</b>\n\n"
        for r in rows:
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text += f"#{r['booking_id']} ‚Äî {r['user_name']}, —Å—Ç–æ–ª {r['table_id']}, {r['time_slot']}, {booking_date}\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# =========================
# TEXT BUTTONS
# =========================
@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ—è –±—Ä–æ–Ω—å")
def on_my_booking(message: types.Message):
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, table_id, time_slot, booking_for
                    FROM bookings
                    WHERE user_id=%s 
                      AND (booking_for + interval '1 hour') > NOW()
                    ORDER BY booked_at DESC
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        if not row:
            user_id = message.from_user.id
            user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.", reply_markup=main_reply_kb(user_id, user_name))
            return
        
        booking_date = row['booking_for'].strftime("%d.%m.%Y")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_{row['booking_id']}"))
        bot.send_message(message.chat.id, f"üîñ –í–∞—à–∞ –±—Ä–æ–Ω—å: —Å—Ç–æ–ª {row['table_id']} –Ω–∞ {row['time_slot']} ({booking_date}).", reply_markup=kb)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üìñ –ú–µ–Ω—é")
def on_menu(message: types.Message):
    menu_photos = [
        "https://gitrepo-drab.vercel.app/images/menu1.jpg",
        "https://gitrepo-drab.vercel.app/images/menu2.jpg",
        "https://gitrepo-drab.vercel.app/images/menu3.jpg",
        "https://gitrepo-drab.vercel.app/images/menu4.jpg",
        "https://gitrepo-drab.vercel.app/images/menu5.jpg",
        "https://gitrepo-drab.vercel.app/images/menu6.jpg"
    ]
    
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    for photo_url in menu_photos:
        try:
            bot.send_photo(
                message.chat.id,
                photo=photo_url
            )
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")


@bot.message_handler(func=lambda m: m.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def on_admin_panel(message: types.Message):
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booking_for, phone
                    FROM bookings
                    WHERE (booking_for + interval '1 hour') > NOW()
                    ORDER BY booking_for ASC;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
            return
        
        for r in rows:
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            text = f"üîñ –ë—Ä–æ–Ω—å #{r['booking_id']} ‚Äî {r['user_name']}\n"
            text += f" ¬†- –°—Ç–æ–ª: {r['table_id']}\n"
            text += f" ¬†- –í—Ä–µ–º—è: {r['time_slot']} ({booking_date})\n"
            text += f" ¬†- –¢–µ–ª–µ—Ñ–æ–Ω: {r['phone']}\n"
            
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{r['booking_id']}"))
            bot.send_message(message.chat.id, text, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@bot.message_handler(func=lambda m: m.text == "üóÇ –ò—Å—Ç–æ—Ä–∏—è")
def on_history_btn(message: types.Message):
    return cmd_history(message)

# =========================
# INLINE CALLBACKS
# =========================
@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def on_cancel_user(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM bookings WHERE booking_id=%s AND user_id=%s;", (booking_id, call.from_user.id))
                conn.commit()
        bot.edit_message_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

@bot.callback_query_handler(func=lambda c: c.data.startswith("admin_cancel_"))
def on_cancel_admin(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[2])
    if not ADMIN_ID or str(call.from_user.id) != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                booking_info = None
                cur.execute("SELECT user_id, table_id, time_slot, booking_for FROM bookings WHERE booking_id=%s;", (booking_id,))
                booking_info = cur.fetchone()

                cur.execute("DELETE FROM bookings WHERE booking_id=%s;", (booking_id,))
                conn.commit()
        
        if booking_info:
            user_id = booking_info.get('user_id')
            
            if user_id:
                booking_date = booking_info['booking_for'].strftime("%d.%m.%Y")
                message_text = f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–°—Ç–æ–ª: {booking_info['table_id']}\n–î–∞—Ç–∞: {booking_date}\n–í—Ä–µ–º—è: {booking_info['time_slot']}"
                try:
                    bot.send_message(user_id, message_text)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        bot.edit_message_text(f"–ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
        bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# =========================
# CONTACT & WEB_APP DATA
# =========================
@bot.message_handler(content_types=['web_app_data'])
def on_webapp_data(message: types.Message):
    print("–ü–†–ò–®–õ–ò –î–ê–ù–ù–´–ï –û–¢ WEBAPP:", message.web_app_data.data)

# =========================
# BOOKING API (–¥–ª—è WebApp / –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
# =========================
@app.route("/book", methods=["POST"])
def book_api():
    try:
        data = request.json
        
        # --- –î–û–ë–ê–í–õ–ï–ù–û –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
        logging.info(f"API /book received data: {data}")
        # ---------------------------------------
        
        user_id_raw = data.get('user_id')
        user_id = int(user_id_raw) if user_id_raw else 0 
        user_name = data.get('user_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        phone = data.get('phone')
        guests = data.get('guests')
        table_id = data.get('table') 
        time_slot = data.get('time') 
        date_str = data.get('date') 

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = {
            'phone': phone, 
            'guests': guests, 
            'table': table_id, 
            'time': time_slot, 
            'date': date_str
        }

        missing_fields = [k for k, v in required_fields.items() if not v]
        
        if missing_fields:
            # --- –õ–û–ì –û–®–ò–ë–ö–ò –ò 400 –û–¢–í–ï–¢ ---
            logging.error(f"API /book is missing fields: {missing_fields}")
            return jsonify({
                "status": "error", 
                "message": f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing_fields)}"
            }), 400

        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        booking_datetime = datetime.combine(booking_date, datetime.strptime(time_slot, '%H:%M').time())

        with db_connect() as conn:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM bookings WHERE table_id = %s AND booking_for::date = %s AND time_slot = %s;",
                    (table_id, booking_date, time_slot)
                )
                existing_booking = cursor.fetchone()
                if existing_booking:
                    return {"status": "error", "message": "–≠—Ç–æ—Ç —Å—Ç–æ–ª —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è."}, 409
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    INSERT INTO bookings (user_id, user_name, phone, table_id, time_slot, guests, booked_at, booking_for)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                    """,
                    (user_id, user_name, phone, table_id, time_slot, guests, datetime.now(), booking_datetime) 
                )
                conn.commit()
                
            # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id: 
                try:
                    formatted_date = booking_date.strftime("%d.%m.%Y")
                    message_text = f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n–°—Ç–æ–ª: {table_id}\n–î–∞—Ç–∞: {formatted_date}\n–í—Ä–µ–º—è: {time_slot}"
                    bot.send_message(user_id, message_text)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            if ADMIN_ID:
                try:
                    formatted_date = booking_date.strftime("%d.%m.%Y")
                    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                    
                    message_text = (
                        f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                        f"–°—Ç–æ–ª: {table_id}\n"
                        f"–î–∞—Ç–∞: {formatted_date}\n"
                        f"–í—Ä–µ–º—è: {time_slot}\n"
                        f"–ì–æ—Å—Ç–µ–π: {guests}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                    )
                    
                    bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
                except Exception as e:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)

            return jsonify({"status": "ok", "message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}), 200

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ /book: {e}")
        return jsonify({"status": "error", "message": str(e)}), 400

@app.route("/get_booked_times", methods=["GET"])
def get_booked_times():
    try:
        table_id = request.args.get('table')
        date_str = request.args.get('date')

        if not all([table_id, date_str]):
            return jsonify({"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞)"}), 400

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        datetime.strptime(date_str, '%Y-%m-%d')
        
        with db_connect() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT time_slot FROM bookings 
                    WHERE table_id = %s 
                      AND booking_for::date = %s 
                      AND (booking_for + interval '1 hour') > NOW() 
                    ORDER BY time_slot;
                    """, 
                    (table_id, date_str)
                )
                booked_times = [row['time_slot'] for row in cursor.fetchall()]
        
        return jsonify({"status": "ok", "booked_times": booked_times}), 200

    except ValueError:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."}), 400
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ /get_booked_times: {e}") 
        return jsonify({"status": "error", "message": str(e)}), 400


# üî•üî•üî• –ú–ê–†–®–†–£–¢, –ö–û–¢–û–†–´–ô –†–ï–®–ê–ï–¢ –û–®–ò–ë–ö–£ 404 üî•üî•üî•
@app.route("/get_booked_tables", methods=["GET"])
def get_booked_tables():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ table_id, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω—è—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
    """
    try:
        date_str = request.args.get('date')
        time_slot = request.args.get('time')

        if not all([date_str, time_slot]):
            return jsonify({"status": "error", "message": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è)"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        datetime.strptime(date_str, '%Y-%m-%d')
        datetime.strptime(time_slot, '%H:%M')

        with db_connect() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT DISTINCT table_id FROM bookings 
                    WHERE booking_for::date = %s 
                      AND time_slot = %s
                      AND (booking_for + interval '1 hour') > NOW(); 
                    """,
                    (date_str, time_slot)
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∑–∞–Ω—è—Ç—ã—Ö —Å—Ç–æ–ª–æ–≤
                booked_tables = [str(row['table_id']) for row in cursor.fetchall()]
        
        logging.info(f"API /get_booked_tables: Date={date_str}, Time={time_slot}, Booked={booked_tables}")
        return jsonify({"status": "ok", "booked_tables": booked_tables}), 200

    except ValueError:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏."}), 400
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ /get_booked_tables: {e}") 
        return jsonify({"status": "error", "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."}), 500


@app.route("/")
def index():
    return "Bot is running.", 200

@app.route("/set_webhook_manual")
def set_webhook_manual():
    if not RENDER_EXTERNAL_URL:
        return jsonify({"status": "error", "message": "RENDER_EXTERNAL_URL is not set"}), 500
    if not RENDER_EXTERNAL_URL.startswith("https://"):
        return jsonify({"status": "error", "message": "Webhook requires HTTPS"}), 500
    
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    try:
        ok = bot.set_webhook(url=webhook_url)
        if ok:
            return jsonify({"status": "ok", "message": f"Webhook set to {webhook_url}"}), 200
        else:
            return jsonify({"status": "error", "message": "Failed to set webhook"}), 500
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data(as_text=True)
        update = types.Update.de_json(json_string)
        
        try:
            bot.process_new_updates([update])
            return "OK", 200
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telebot: {e}")
            return "OK", 200

    else:
        return "Invalid content type", 403


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    if not RENDER_EXTERNAL_URL:
        raise RuntimeError("–û—à–∏–±–∫–∞: RENDER_EXTERNAL_URL –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
    if not RENDER_EXTERNAL_URL.startswith("https://"):
        raise RuntimeError("–û—à–∏–±–∫–∞: Telegram webhook —Ç—Ä–µ–±—É–µ—Ç HTTPS!")

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        bot.remove_webhook()
        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        ok = bot.set_webhook(url=webhook_url)
        print(f"Webhook set -> {webhook_url} ; ok={ok}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)
    
    init_db()
    app.run(host="0.0.0.0", port=port)