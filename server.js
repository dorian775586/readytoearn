// server.js
import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import fetch from "node-fetch";
import pkg from "pg";
const { Pool } = pkg;

const app = express();
app.use(bodyParser.json());
app.use(cors()); // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è web app

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã PostgreSQL (Render)
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render
});

// –¢–æ–∫–µ–Ω –∏ —á–∞—Ç ID Telegram –±–æ—Ç–∞ (–¥–æ–±–∞–≤—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render)
const TELEGRAM_TOKEN = process.env.TG_TOKEN || process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TG_CHAT_ID || process.env.TELEGRAM_ADMIN_CHAT_ID;

if (!TELEGRAM_TOKEN) {
  console.warn("Warning: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞.");
}
if (!TELEGRAM_CHAT_ID) {
  console.warn("Warning: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
}

/**
 * –ü–æ–º–æ—â–Ω–∏–∫: –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–∑—è—Ç—å —á–∏—Å–ª–æ–≤–æ–π table id
 */
function parseTableId(body) {
  const t = body.table_id ?? body.table ?? body.tableNumber ?? body.tableNumber;
  const tid = t === undefined || t === null ? null : Number(t);
  return Number.isFinite(tid) ? tid : null;
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç ISO-—Å—Ç—Ä–æ–∫—É booking_for (–¥–∞—Ç–∞+–≤—Ä–µ–º—è).
 * –ï—Å–ª–∏ date —É–∫–∞–∑–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è —Å time –∏, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å.
 * date –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, time –≤ HH:MM
 */
function buildBookingFor(dateStr, timeStr) {
  if (!timeStr) return null;
  try {
    if (dateStr) {
      // –°–æ–±–µ—Ä—ë–º ISO: "YYYY-MM-DDTHH:MM:00"
      const iso = `${dateStr}T${timeStr}:00`;
      const d = new Date(iso);
      if (!isNaN(d)) return d.toISOString();
    }
    // –ù–µ—Ç –¥–∞—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –ª–æ–≥–∏–∫—É
    const now = new Date();
    const [hh, mm] = timeStr.split(":").map(Number);
    if (Number.isFinite(hh) && Number.isFinite(mm)) {
      const candidate = new Date(now);
      candidate.setHours(hh, mm, 0, 0);
      if (candidate < now) candidate.setDate(candidate.getDate() + 1);
      return candidate.toISOString();
    }
  } catch (e) {}
  return null;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –æ—Ç Web App)
app.options("/book", cors()); // CORS preflight
app.post("/book", async (req, res) => {
  try {
    const body = req.body || {};

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π: table / table_id
    const table_id = parseTableId(body);
    const date = body.date ?? null;            // expected "YYYY-MM-DD" or null
    const time = body.time ?? body.time_slot ?? null; // expected "HH:MM"
    const guests = body.guests !== undefined ? Number(body.guests) : null;
    const phone = body.phone ?? null;
    const user_id = body.user_id ?? null;
    const user_name = body.user_name ?? body.userName ?? null;

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ)
    if (!table_id || !time || !guests) {
      return res.status(400).json({ status: "error", error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: —Ç—Ä–µ–±—É–µ—Ç—Å—è table, time –∏ guests" });
    }
    if (Number.isNaN(guests) || guests <= 0) {
      return res.status(400).json({ status: "error", error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π" });
    }

    // –í—ã—á–∏—Å–ª–∏–º booking_for (timestamp) –∏ booked_at
    const booking_for_iso = buildBookingFor(date, time); // ISO string or null
    const booked_at_iso = new Date().toISOString();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å –≤ PostgreSQL
    // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: –¥–æ–±–∞–≤–∏–ª guests –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    const insertQuery = `
      INSERT INTO bookings (user_id, user_name, table_id, time_slot, booking_date, booked_at, booking_for, guests, phone)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING booking_id;
    `;
    const values = [
      user_id || null,
      user_name || null,
      table_id,
      time,
      date || null,
      booked_at_iso,
      booking_for_iso,
      guests,
      phone || null
    ];

    const result = await pool.query(insertQuery, values);
    const bookingId = result.rows && result.rows[0] ? result.rows[0].booking_id : null;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const msgLines = [
      `üìå –ù–æ–≤–∞—è –±—Ä–æ–Ω—å${bookingId ? ` #${bookingId}` : ""}:`,
      `–°—Ç–æ–ª–∏–∫: ${table_id}`,
      `–î–∞—Ç–∞: ${date || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`,
      `–í—Ä–µ–º—è: ${time}`,
      `–ì–æ—Å—Ç–µ–π: ${guests}`,
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user_name || "–Ω–µ —É–∫–∞–∑–∞–Ω"}${user_id ? ` (${user_id})` : ""}`
    ];
    const message = msgLines.join("\n");

    // –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —á–∞—Ç)
    if (TELEGRAM_TOKEN && TELEGRAM_CHAT_ID) {
      try {
        await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text: message })
        });
      } catch (tgErr) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–∞–¥–º–∏–Ω):", tgErr);
      }
    }

    // –ü–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ user_id –∏ –±–æ—Ç –º–æ–∂–µ—Ç –µ–º—É –ø–∏—Å–∞—Ç—å)
    if (TELEGRAM_TOKEN && user_id) {
      try {
        const userMsg = `‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: —Å—Ç–æ–ª ${table_id}${date ? `, ${date}` : ""} –≤ ${time}, –≥–æ—Å—Ç–µ–π: ${guests}.`;
        await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id: user_id, text: userMsg })
        });
      } catch (tgErr) {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å):", tgErr.message || tgErr);
      }
    }

    return res.json({ status: "ok", booking_id: bookingId });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ /book:", err);
    return res.status(500).json({ status: "error", error: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
