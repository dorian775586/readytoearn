import os
import logging
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telebot import TeleBot, types
import psycopg2
from psycopg2.extras import RealDictCursor
from flask_cors import CORS
from dateutil import tz # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´
# =========================
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.environ.get("DATABASE_URL") or "").strip()
ADMIN_ID_ENV = (os.environ.get("ADMIN_ID") or "").strip()
WEBAPP_URL = (os.environ.get("WEBAPP_URL") or "https://gitrepo-drab.vercel.app").strip()
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL
if not BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω!")
if not DATABASE_URL:
    raise RuntimeError("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")
if not RENDER_EXTERNAL_URL:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏.")

if "render.com/" in DATABASE_URL and ":5432" not in DATABASE_URL:
    DATABASE_URL = DATABASE_URL.replace(".render.com/", ".render.com:5432/")

ADMIN_ID = None
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
        print(f"ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADMIN_ID}")
    except ValueError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID ('{ADMIN_ID_ENV}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")

# =========================
# DB INIT
# =========================
def db_connect():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–æ–≤."""
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                CREATE TABLE IF NOT EXISTS tables (
                    id INT PRIMARY KEY
                );
                """)
                cur.execute("""
                CREATE TABLE IF NOT EXISTS bookings (
                    booking_id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    user_name VARCHAR(255),
                    phone TEXT,
                    guests INT,
                    table_id INT NOT NULL,
                    time_slot TEXT NOT NULL,
                    booked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    booking_for TIMESTAMP
                );
                """)
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_conflict ON bookings (table_id, booking_for);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_user_active ON bookings (user_id, booking_for DESC);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_future_time ON bookings (booking_for);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_bookings_booked_at ON bookings (booked_at DESC);")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤ –¥–æ 20
                TARGET_TABLE_COUNT = 20
                cur.execute("SELECT id FROM tables ORDER BY id ASC;")
                existing_table_ids = [row['id'] for row in cur.fetchall()]
                tables_to_add = [i for i in range(1, TARGET_TABLE_COUNT + 1) if i not in existing_table_ids]
                
                if tables_to_add:
                    insert_values = ",".join(f"({i})" for i in tables_to_add)
                    cur.execute(f"INSERT INTO tables (id) VALUES {insert_values};")
                    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tables_to_add)} –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–æ–≤ (ID: {tables_to_add}).")
                else:
                    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –í—Å–µ —Å—Ç–æ–ª—ã –¥–æ 20 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
                
            conn.commit()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")

# =========================
# BOT & APP
# =========================
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)
CORS(app)

with app.app_context():
    init_db()

# =========================
# HELPERS (UI)
# =========================
def main_reply_kb(user_id: int, user_name: str) -> types.ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞."""
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # URL –¥–ª—è WebApp –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞/–±—ç–∫—ç–Ω–¥
    web_app_url = f"{WEBAPP_URL}?user_id={user_id}&user_name={user_name}&bot_url={RENDER_EXTERNAL_URL}"
    
    row1 = [types.KeyboardButton("‚ú® –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=types.WebAppInfo(url=web_app_url))]
    row2 = [types.KeyboardButton("üìã –ú–æ—è –±—Ä–æ–Ω—å"), types.KeyboardButton("üìñ –ú–µ–Ω—é")]
    
    kb.row(*row1)
    kb.row(*row2)
    
    if ADMIN_ID and str(user_id) == str(ADMIN_ID):
        kb.row(types.KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è"))
    return kb

# =========================
# TELEGRAM COMMANDS & BUTTONS
# =========================

@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    bot.send_photo(
        message.chat.id,
        photo="https://placehold.co/600x400/3c3/white?text=Restobar+White+Fox", # –ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ —Ñ–æ—Ç–æ
        caption="<b>–†–µ—Å—Ç–æ–±–∞—Ä ¬´–ë–µ–ª—ã–π –õ–∏—Å¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–æ–ª–∏–∫!",
        reply_markup=main_reply_kb(user_id, user_name),
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ—è –±—Ä–æ–Ω—å")
def on_my_booking(message: types.Message):
    """
    –§–£–ù–ö–¶–ò–Ø 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    (–£–∂–µ –±—ã–ª–∞ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ).
    """
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ò—â–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –±—Ä–æ–Ω—å (booking_for > NOW())
                cur.execute("""
                    SELECT booking_id, table_id, time_slot, booking_for
                    FROM bookings
                    WHERE user_id=%s AND booking_for > NOW()
                    ORDER BY booking_for ASC
                    LIMIT 1;
                """, (message.from_user.id,))
                row = cur.fetchone()
        
        user_id = message.from_user.id
        user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        if not row:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.", reply_markup=main_reply_kb(user_id, user_name))
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        booking_date = row['booking_for'].strftime("%d.%m.%Y")
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_{row['booking_id']}"))
        bot.send_message(message.chat.id, 
                         f"üîñ –í–∞—à–∞ –±—Ä–æ–Ω—å: —Å—Ç–æ–ª <b>{row['table_id']}</b> –Ω–∞ <b>{row['time_slot']}</b> ({booking_date}).", 
                         parse_mode="HTML",
                         reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ on_my_booking: {e}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏: {e}")

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram-–±–æ—Ç–∞)
@bot.message_handler(func=lambda m: m.text == "üìñ –ú–µ–Ω—é")
def on_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ, —Ç.–∫. —Ä–µ–∞–ª—å–Ω—ã–µ URL –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    menu_photos = [
        "https://placehold.co/400x600/333/white?text=Menu+Page+1", 
        "https://placehold.co/400x600/333/white?text=Menu+Page+2",
        "https://placehold.co/400x600/333/white?text=Menu+Page+3"
    ]
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    for photo_url in menu_photos:
        try:
            bot.send_photo(message.chat.id, photo=photo_url)
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

@bot.message_handler(func=lambda m: m.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def on_admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π."""
    if not ADMIN_ID or str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT booking_id, user_name, table_id, time_slot, booking_for, phone, guests
                    FROM bookings
                    WHERE booking_for > NOW()
                    ORDER BY booking_for ASC;
                """)
                rows = cur.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
            return
        
        for r in rows:
            booking_date = r['booking_for'].strftime("%d.%m.%Y")
            user_link = f'<a href="tg://user?id={r["user_id"]}">{r["user_name"]}</a>' if r["user_id"] else r["user_name"]
            
            text = f"üîñ –ë—Ä–æ–Ω—å #{r['booking_id']} ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
            text += f"¬† ¬†- –°—Ç–æ–ª: <b>{r['table_id']}</b>\n"
            text += f"¬† ¬†- –í—Ä–µ–º—è: <b>{r['time_slot']} ({booking_date})</b>\n"
            text += f"¬† ¬†- –ì–æ—Å—Ç–µ–π: {r.get('guests', 'N/A')}\n"
            text += f"¬† ¬†- –¢–µ–ª–µ—Ñ–æ–Ω: {r.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{r['booking_id']}"))
            bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

# ... (–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –Ω–µ –º–µ–Ω—è–ª—Å—è)
@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def on_cancel_user(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    # ... (–ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å)
    try:
        booking_info = None
        rows_deleted = 0
        
        with db_connect() as conn:
            with conn.cursor() as cur:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –î–û —É–¥–∞–ª–µ–Ω–∏—è
                cur.execute("""
                    SELECT user_id, user_name, table_id, time_slot, booking_for, phone, guests
                    FROM bookings
                    WHERE booking_id=%s AND user_id=%s;
                """, (booking_id, call.from_user.id))
                booking_info = cur.fetchone()
                
                # 2. –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                cur.execute("DELETE FROM bookings WHERE booking_id=%s AND user_id=%s;", (booking_id, call.from_user.id))
                rows_deleted = cur.rowcount
                conn.commit()
        
        if rows_deleted > 0:
            bot.edit_message_text("‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
            
            # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if ADMIN_ID and booking_info:
                try:
                    booking_date = booking_info['booking_for'].strftime("%d.%m.%Y")
                    user_id = booking_info['user_id']
                    user_name = booking_info['user_name'] or call.from_user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>' if user_id else user_name
                    
                    message_text = (
                        f"‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n"
                        f"ID –ë—Ä–æ–Ω–∏: <b>#{booking_id}</b>\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                        f"–°—Ç–æ–ª: {booking_info['table_id']}\n"
                        f"–î–∞—Ç–∞: {booking_date}\n"
                        f"–í—Ä–µ–º—è: {booking_info['time_slot']}"
                    )
                    bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        else:
            bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@bot.callback_query_handler(func=lambda c: c.data.startswith("admin_cancel_"))
def on_cancel_admin(call: types.CallbackQuery):
    """
    –§–£–ù–ö–¶–ò–Ø 2: –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    (–£–∂–µ –±—ã–ª–∞ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ, –Ω–æ —è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).
    """
    booking_id = int(call.data.split("_")[2])
    if not ADMIN_ID or str(call.from_user.id) != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    try:
        booking_info = None
        rows_deleted = 0
        with db_connect() as conn:
            with conn.cursor() as cur:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –î–û —É–¥–∞–ª–µ–Ω–∏—è
                cur.execute("SELECT user_id, table_id, time_slot, booking_for FROM bookings WHERE booking_id=%s;", (booking_id,))
                booking_info = cur.fetchone()
                
                # 2. –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                cur.execute("DELETE FROM bookings WHERE booking_id=%s;", (booking_id,))
                rows_deleted = cur.rowcount
                conn.commit()
        
        if rows_deleted > 0 and booking_info and booking_info['user_id']:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –∞–¥–º–∏–Ω–æ–º
            user_id = booking_info['user_id']
            booking_date = booking_info['booking_for'].strftime("%d.%m.%Y")
            message_text = (
                f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                f"–°—Ç–æ–ª: <b>{booking_info['table_id']}</b>\n"
                f"–î–∞—Ç–∞: {booking_date}\n"
                f"–í—Ä–µ–º—è: {booking_info['time_slot']}"
            )
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(user_id, message_text, parse_mode="HTML")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

        bot.edit_message_text(f"‚úÖ –ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=call.message.chat.id, message_id=call.message.id)
        bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–æ–º: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# =========================
# FLASK API
# =========================

@app.route("/get_booked_times", methods=["GET"])
def get_booked_times():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –Ω–∞ –±—ç–∫—ç–Ω–¥–µ (UTC).
    """
    table_id = request.args.get("table", type=int)
    date_str = request.args.get("date")

    if not table_id or not date_str:
        return jsonify({"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ç–æ–ª –∏–ª–∏ –¥–∞—Ç–∞."}), 400

    try:
        query_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."}), 400

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å 10:00 –¥–æ 23:30)
    ALL_SLOTS = []
    for h in range(10, 24):
        for m in [0, 30]:
            if h == 23 and m > 0: continue # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è 23:00
            ALL_SLOTS.append(f"{h:02d}:{m:02d}")

    now_utc = datetime.utcnow().replace(tzinfo=tz.tzutc())
    today_utc = now_utc.date()
    current_time_str = now_utc.strftime("%H:%M")

    booked_slots = set()
    try:
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∞ –∏ –¥–∞—Ç—ã
                cur.execute("""
                    SELECT time_slot, booking_for FROM bookings
                    WHERE table_id = %s 
                    AND DATE(booking_for) = %s 
                    ORDER BY time_slot ASC;
                """, (table_id, query_date))
                
                rows = cur.fetchall()
                booked_slots = {row['time_slot'] for row in rows}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."}), 500

    free_slots = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º: –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –ò –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º (–µ—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ UTC)
    for slot in ALL_SLOTS:
        if slot not in booked_slots:
            is_future_slot = True
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ - –°–ï–ì–û–î–ù–Ø (–ø–æ UTC), –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
            if query_date == today_utc:
                if slot < current_time_str:
                    is_future_slot = False
            
            if is_future_slot:
                free_slots.append(slot)
    
    logging.info(f"get_booked_times: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(free_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–∞ {table_id} –Ω–∞ {date_str}")
    
    return jsonify({
        "status": "ok", 
        "table_id": table_id,
        "date": date_str,
        "free_times": free_slots
    })

@app.route("/book", methods=["POST"])
def book_api():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    try:
        data = request.json
        user_id = data.get('user_id')
        user_name = data.get('user_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        table_id = data.get('table_id')
        time_slot = data.get('time_slot')
        date_str = data.get('date_str') 
        phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        guests = data.get('guests', 1)

        if not all([user_id, table_id, time_slot, date_str]):
            return jsonify({"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."}), 400

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ö—Ä–∞–Ω–∏–º –≤ UTC)
        booking_datetime_str = f"{date_str} {time_slot}"
        try:
            # –ü–∞—Ä—Å–∏–º –∫–∞–∫ UTC –≤—Ä–µ–º—è
            booking_for = datetime.strptime(booking_datetime_str, "%Y-%m-%d %H:%M").replace(tzinfo=tz.tzutc())
        except ValueError:
            return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏."}), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        if booking_for < datetime.utcnow().replace(tzinfo=tz.tzutc()):
            return jsonify({"status": "error", "message": "–ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è."}), 400
        
        with db_connect() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                cur.execute("""
                    SELECT booking_id FROM bookings
                    WHERE table_id = %s AND booking_for = %s
                """, (table_id, booking_for))
                if cur.fetchone():
                    return jsonify({"status": "error", "message": "–≠—Ç–æ—Ç —Å—Ç–æ–ª —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."}), 409

                # –í—Å—Ç–∞–≤–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cur.execute("""
                    INSERT INTO bookings (user_id, user_name, phone, guests, table_id, time_slot, booking_for)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    RETURNING booking_id;
                """, (user_id, user_name, phone, guests, table_id, time_slot, booking_for))
                
                new_booking_id = cur.fetchone()['booking_id']
                conn.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏
        if ADMIN_ID:
            booking_date_formatted = booking_for.strftime("%d.%m.%Y")
            user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>'
            message_text = (
                f"‚úÖ <b>–ù–û–í–ê–Ø –ë–†–û–ù–¨: #{new_booking_id}</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                f"–°—Ç–æ–ª: <b>{table_id}</b>\n"
                f"–î–∞—Ç–∞/–í—Ä–µ–º—è: <b>{booking_date_formatted} –≤ {time_slot}</b>\n"
                f"–ì–æ—Å—Ç–µ–π: {guests}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )
            try:
                bot.send_message(ADMIN_ID, message_text, parse_mode="HTML")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏: {e}")

        return jsonify({"status": "ok", "message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", "booking_id": new_booking_id}), 201

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ book_api: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/")
def index():
    """–ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    return "Bot is running.", 200

# =========================
# TELEGRAM WEBHOOK / SERVER START
# =========================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –≤–µ–±—Ö—É–∫ –æ–∂–∏–¥–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook
@app.route("/webhook", methods=['POST'])
def get_message():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram."""
    json_string = request.get_data().decode('utf-8')
    update = types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

if __name__ == '__main__':
    # –≠—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render, –Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –ù–∞ Render –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è gunicorn
    if RENDER_EXTERNAL_URL:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        bot.remove_webhook()
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ /webhook
        bot.set_webhook(url=RENDER_EXTERNAL_URL + "/webhook")
        print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {RENDER_EXTERNAL_URL}/webhook")
    
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
